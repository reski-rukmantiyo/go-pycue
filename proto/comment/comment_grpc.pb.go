// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: OpenCue/proto/comment.proto

package comment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommentInterface_Delete_FullMethodName = "/comment.CommentInterface/Delete"
	CommentInterface_Save_FullMethodName   = "/comment.CommentInterface/Save"
)

// CommentInterfaceClient is the client API for CommentInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentInterfaceClient interface {
	// Delete the specified comment.
	Delete(ctx context.Context, in *CommentDeleteRequest, opts ...grpc.CallOption) (*CommentDeleteResponse, error)
	// Saves the specified comment.
	Save(ctx context.Context, in *CommentSaveRequest, opts ...grpc.CallOption) (*CommentSaveResponse, error)
}

type commentInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentInterfaceClient(cc grpc.ClientConnInterface) CommentInterfaceClient {
	return &commentInterfaceClient{cc}
}

func (c *commentInterfaceClient) Delete(ctx context.Context, in *CommentDeleteRequest, opts ...grpc.CallOption) (*CommentDeleteResponse, error) {
	out := new(CommentDeleteResponse)
	err := c.cc.Invoke(ctx, CommentInterface_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentInterfaceClient) Save(ctx context.Context, in *CommentSaveRequest, opts ...grpc.CallOption) (*CommentSaveResponse, error) {
	out := new(CommentSaveResponse)
	err := c.cc.Invoke(ctx, CommentInterface_Save_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentInterfaceServer is the server API for CommentInterface service.
// All implementations must embed UnimplementedCommentInterfaceServer
// for forward compatibility
type CommentInterfaceServer interface {
	// Delete the specified comment.
	Delete(context.Context, *CommentDeleteRequest) (*CommentDeleteResponse, error)
	// Saves the specified comment.
	Save(context.Context, *CommentSaveRequest) (*CommentSaveResponse, error)
	mustEmbedUnimplementedCommentInterfaceServer()
}

// UnimplementedCommentInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentInterfaceServer struct {
}

func (UnimplementedCommentInterfaceServer) Delete(context.Context, *CommentDeleteRequest) (*CommentDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCommentInterfaceServer) Save(context.Context, *CommentSaveRequest) (*CommentSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedCommentInterfaceServer) mustEmbedUnimplementedCommentInterfaceServer() {}

// UnsafeCommentInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentInterfaceServer will
// result in compilation errors.
type UnsafeCommentInterfaceServer interface {
	mustEmbedUnimplementedCommentInterfaceServer()
}

func RegisterCommentInterfaceServer(s grpc.ServiceRegistrar, srv CommentInterfaceServer) {
	s.RegisterService(&CommentInterface_ServiceDesc, srv)
}

func _CommentInterface_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentInterfaceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentInterface_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentInterfaceServer).Delete(ctx, req.(*CommentDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentInterface_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentInterfaceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentInterface_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentInterfaceServer).Save(ctx, req.(*CommentSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentInterface_ServiceDesc is the grpc.ServiceDesc for CommentInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comment.CommentInterface",
	HandlerType: (*CommentInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _CommentInterface_Delete_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _CommentInterface_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "OpenCue/proto/comment.proto",
}
