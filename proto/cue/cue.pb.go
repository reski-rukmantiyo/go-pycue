// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: OpenCue/proto/cue.proto

package cue

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A struct that contains server specific performance numbers
type SystemStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManageWaiting             int32 `protobuf:"varint,1,opt,name=manage_waiting,json=manageWaiting,proto3" json:"manage_waiting,omitempty"`
	ManageRemainingCapacity   int32 `protobuf:"varint,2,opt,name=manage_remaining_capacity,json=manageRemainingCapacity,proto3" json:"manage_remaining_capacity,omitempty"`
	ManageThreads             int32 `protobuf:"varint,3,opt,name=manage_threads,json=manageThreads,proto3" json:"manage_threads,omitempty"`
	ManageExecuted            int64 `protobuf:"varint,4,opt,name=manage_executed,json=manageExecuted,proto3" json:"manage_executed,omitempty"`
	ManageRejected            int64 `protobuf:"varint,5,opt,name=manage_rejected,json=manageRejected,proto3" json:"manage_rejected,omitempty"`
	DispatchWaiting           int32 `protobuf:"varint,6,opt,name=dispatch_waiting,json=dispatchWaiting,proto3" json:"dispatch_waiting,omitempty"`
	DispatchRemainingCapacity int32 `protobuf:"varint,7,opt,name=dispatch_remaining_capacity,json=dispatchRemainingCapacity,proto3" json:"dispatch_remaining_capacity,omitempty"`
	DispatchThreads           int32 `protobuf:"varint,8,opt,name=dispatch_threads,json=dispatchThreads,proto3" json:"dispatch_threads,omitempty"`
	DispatchExecuted          int64 `protobuf:"varint,9,opt,name=dispatch_executed,json=dispatchExecuted,proto3" json:"dispatch_executed,omitempty"`
	DispatchRejected          int64 `protobuf:"varint,10,opt,name=dispatch_rejected,json=dispatchRejected,proto3" json:"dispatch_rejected,omitempty"`
	ReportWaiting             int32 `protobuf:"varint,11,opt,name=report_waiting,json=reportWaiting,proto3" json:"report_waiting,omitempty"`
	ReportRemainingCapacity   int32 `protobuf:"varint,12,opt,name=report_remaining_capacity,json=reportRemainingCapacity,proto3" json:"report_remaining_capacity,omitempty"`
	ReportThreads             int32 `protobuf:"varint,13,opt,name=report_threads,json=reportThreads,proto3" json:"report_threads,omitempty"`
	ReportExecuted            int64 `protobuf:"varint,14,opt,name=report_executed,json=reportExecuted,proto3" json:"report_executed,omitempty"`
	ReportRejected            int64 `protobuf:"varint,15,opt,name=report_rejected,json=reportRejected,proto3" json:"report_rejected,omitempty"`
	BookingWaiting            int32 `protobuf:"varint,16,opt,name=booking_waiting,json=bookingWaiting,proto3" json:"booking_waiting,omitempty"`
	BookingRemainingCapacity  int32 `protobuf:"varint,17,opt,name=booking_remaining_capacity,json=bookingRemainingCapacity,proto3" json:"booking_remaining_capacity,omitempty"`
	BookingThreads            int32 `protobuf:"varint,18,opt,name=booking_threads,json=bookingThreads,proto3" json:"booking_threads,omitempty"`
	BookingSleepMillis        int32 `protobuf:"varint,19,opt,name=booking_sleep_millis,json=bookingSleepMillis,proto3" json:"booking_sleep_millis,omitempty"`
	BookingExecuted           int64 `protobuf:"varint,20,opt,name=booking_executed,json=bookingExecuted,proto3" json:"booking_executed,omitempty"`
	BookingRejected           int64 `protobuf:"varint,21,opt,name=booking_rejected,json=bookingRejected,proto3" json:"booking_rejected,omitempty"`
	HostBalanceSuccess        int64 `protobuf:"varint,22,opt,name=host_balance_success,json=hostBalanceSuccess,proto3" json:"host_balance_success,omitempty"`
	HostBalanceFailed         int64 `protobuf:"varint,23,opt,name=host_balance_failed,json=hostBalanceFailed,proto3" json:"host_balance_failed,omitempty"`
	KilledOffenderProcs       int64 `protobuf:"varint,24,opt,name=killed_offender_procs,json=killedOffenderProcs,proto3" json:"killed_offender_procs,omitempty"`
	KilledOomProcs            int64 `protobuf:"varint,25,opt,name=killed_oom_procs,json=killedOomProcs,proto3" json:"killed_oom_procs,omitempty"`
	ClearedProcs              int64 `protobuf:"varint,26,opt,name=cleared_procs,json=clearedProcs,proto3" json:"cleared_procs,omitempty"`
	BookingErrors             int64 `protobuf:"varint,27,opt,name=booking_errors,json=bookingErrors,proto3" json:"booking_errors,omitempty"`
	BookingRetries            int64 `protobuf:"varint,28,opt,name=booking_retries,json=bookingRetries,proto3" json:"booking_retries,omitempty"`
	BookedProcs               int64 `protobuf:"varint,29,opt,name=booked_procs,json=bookedProcs,proto3" json:"booked_procs,omitempty"`
	ReqForData                int64 `protobuf:"varint,30,opt,name=req_for_data,json=reqForData,proto3" json:"req_for_data,omitempty"`
	ReqForFunction            int64 `protobuf:"varint,31,opt,name=req_for_function,json=reqForFunction,proto3" json:"req_for_function,omitempty"`
	ReqErrors                 int64 `protobuf:"varint,32,opt,name=req_errors,json=reqErrors,proto3" json:"req_errors,omitempty"`
	UnbookedProcs             int64 `protobuf:"varint,33,opt,name=unbooked_procs,json=unbookedProcs,proto3" json:"unbooked_procs,omitempty"`
	PickedUpCores             int64 `protobuf:"varint,34,opt,name=picked_up_cores,json=pickedUpCores,proto3" json:"picked_up_cores,omitempty"`
	StrandedCores             int64 `protobuf:"varint,35,opt,name=stranded_cores,json=strandedCores,proto3" json:"stranded_cores,omitempty"`
}

func (x *SystemStats) Reset() {
	*x = SystemStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OpenCue_proto_cue_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStats) ProtoMessage() {}

func (x *SystemStats) ProtoReflect() protoreflect.Message {
	mi := &file_OpenCue_proto_cue_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStats.ProtoReflect.Descriptor instead.
func (*SystemStats) Descriptor() ([]byte, []int) {
	return file_OpenCue_proto_cue_proto_rawDescGZIP(), []int{0}
}

func (x *SystemStats) GetManageWaiting() int32 {
	if x != nil {
		return x.ManageWaiting
	}
	return 0
}

func (x *SystemStats) GetManageRemainingCapacity() int32 {
	if x != nil {
		return x.ManageRemainingCapacity
	}
	return 0
}

func (x *SystemStats) GetManageThreads() int32 {
	if x != nil {
		return x.ManageThreads
	}
	return 0
}

func (x *SystemStats) GetManageExecuted() int64 {
	if x != nil {
		return x.ManageExecuted
	}
	return 0
}

func (x *SystemStats) GetManageRejected() int64 {
	if x != nil {
		return x.ManageRejected
	}
	return 0
}

func (x *SystemStats) GetDispatchWaiting() int32 {
	if x != nil {
		return x.DispatchWaiting
	}
	return 0
}

func (x *SystemStats) GetDispatchRemainingCapacity() int32 {
	if x != nil {
		return x.DispatchRemainingCapacity
	}
	return 0
}

func (x *SystemStats) GetDispatchThreads() int32 {
	if x != nil {
		return x.DispatchThreads
	}
	return 0
}

func (x *SystemStats) GetDispatchExecuted() int64 {
	if x != nil {
		return x.DispatchExecuted
	}
	return 0
}

func (x *SystemStats) GetDispatchRejected() int64 {
	if x != nil {
		return x.DispatchRejected
	}
	return 0
}

func (x *SystemStats) GetReportWaiting() int32 {
	if x != nil {
		return x.ReportWaiting
	}
	return 0
}

func (x *SystemStats) GetReportRemainingCapacity() int32 {
	if x != nil {
		return x.ReportRemainingCapacity
	}
	return 0
}

func (x *SystemStats) GetReportThreads() int32 {
	if x != nil {
		return x.ReportThreads
	}
	return 0
}

func (x *SystemStats) GetReportExecuted() int64 {
	if x != nil {
		return x.ReportExecuted
	}
	return 0
}

func (x *SystemStats) GetReportRejected() int64 {
	if x != nil {
		return x.ReportRejected
	}
	return 0
}

func (x *SystemStats) GetBookingWaiting() int32 {
	if x != nil {
		return x.BookingWaiting
	}
	return 0
}

func (x *SystemStats) GetBookingRemainingCapacity() int32 {
	if x != nil {
		return x.BookingRemainingCapacity
	}
	return 0
}

func (x *SystemStats) GetBookingThreads() int32 {
	if x != nil {
		return x.BookingThreads
	}
	return 0
}

func (x *SystemStats) GetBookingSleepMillis() int32 {
	if x != nil {
		return x.BookingSleepMillis
	}
	return 0
}

func (x *SystemStats) GetBookingExecuted() int64 {
	if x != nil {
		return x.BookingExecuted
	}
	return 0
}

func (x *SystemStats) GetBookingRejected() int64 {
	if x != nil {
		return x.BookingRejected
	}
	return 0
}

func (x *SystemStats) GetHostBalanceSuccess() int64 {
	if x != nil {
		return x.HostBalanceSuccess
	}
	return 0
}

func (x *SystemStats) GetHostBalanceFailed() int64 {
	if x != nil {
		return x.HostBalanceFailed
	}
	return 0
}

func (x *SystemStats) GetKilledOffenderProcs() int64 {
	if x != nil {
		return x.KilledOffenderProcs
	}
	return 0
}

func (x *SystemStats) GetKilledOomProcs() int64 {
	if x != nil {
		return x.KilledOomProcs
	}
	return 0
}

func (x *SystemStats) GetClearedProcs() int64 {
	if x != nil {
		return x.ClearedProcs
	}
	return 0
}

func (x *SystemStats) GetBookingErrors() int64 {
	if x != nil {
		return x.BookingErrors
	}
	return 0
}

func (x *SystemStats) GetBookingRetries() int64 {
	if x != nil {
		return x.BookingRetries
	}
	return 0
}

func (x *SystemStats) GetBookedProcs() int64 {
	if x != nil {
		return x.BookedProcs
	}
	return 0
}

func (x *SystemStats) GetReqForData() int64 {
	if x != nil {
		return x.ReqForData
	}
	return 0
}

func (x *SystemStats) GetReqForFunction() int64 {
	if x != nil {
		return x.ReqForFunction
	}
	return 0
}

func (x *SystemStats) GetReqErrors() int64 {
	if x != nil {
		return x.ReqErrors
	}
	return 0
}

func (x *SystemStats) GetUnbookedProcs() int64 {
	if x != nil {
		return x.UnbookedProcs
	}
	return 0
}

func (x *SystemStats) GetPickedUpCores() int64 {
	if x != nil {
		return x.PickedUpCores
	}
	return 0
}

func (x *SystemStats) GetStrandedCores() int64 {
	if x != nil {
		return x.StrandedCores
	}
	return 0
}

// GetSystemStats
type CueGetSystemStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CueGetSystemStatsRequest) Reset() {
	*x = CueGetSystemStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OpenCue_proto_cue_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CueGetSystemStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CueGetSystemStatsRequest) ProtoMessage() {}

func (x *CueGetSystemStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OpenCue_proto_cue_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CueGetSystemStatsRequest.ProtoReflect.Descriptor instead.
func (*CueGetSystemStatsRequest) Descriptor() ([]byte, []int) {
	return file_OpenCue_proto_cue_proto_rawDescGZIP(), []int{1}
}

type CueGetSystemStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *SystemStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *CueGetSystemStatsResponse) Reset() {
	*x = CueGetSystemStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OpenCue_proto_cue_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CueGetSystemStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CueGetSystemStatsResponse) ProtoMessage() {}

func (x *CueGetSystemStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OpenCue_proto_cue_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CueGetSystemStatsResponse.ProtoReflect.Descriptor instead.
func (*CueGetSystemStatsResponse) Descriptor() ([]byte, []int) {
	return file_OpenCue_proto_cue_proto_rawDescGZIP(), []int{2}
}

func (x *CueGetSystemStatsResponse) GetStats() *SystemStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

var File_OpenCue_proto_cue_proto protoreflect.FileDescriptor

var file_OpenCue_proto_cue_proto_rawDesc = []byte{
	0x0a, 0x17, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x75, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x75, 0x65, 0x22, 0x86,
	0x0c, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x64, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x3c, 0x0a, 0x1a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x18, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a,
	0x0f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x65,
	0x65, 0x70, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x68, 0x6f,
	0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x68,
	0x6f, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x12, 0x32, 0x0a, 0x15, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6f,
	0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x73, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x63, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65,
	0x71, 0x46, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x46, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x6e, 0x62, 0x6f, 0x6f,
	0x6b, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x63, 0x6b,
	0x65, 0x64, 0x5f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64,
	0x65, 0x64, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x75, 0x65, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x19, 0x43, 0x75, 0x65, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x75, 0x65, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x32, 0x5f, 0x0a, 0x0c, 0x43, 0x75, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x75, 0x65,
	0x2e, 0x43, 0x75, 0x65, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x75, 0x65, 0x2e,
	0x43, 0x75, 0x65, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2c, 0x0a, 0x1d, 0x63, 0x6f, 0x6d,
	0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x73, 0x70, 0x63, 0x75,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x75, 0x65, 0x50, 0x01, 0x5a, 0x09, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x75, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_OpenCue_proto_cue_proto_rawDescOnce sync.Once
	file_OpenCue_proto_cue_proto_rawDescData = file_OpenCue_proto_cue_proto_rawDesc
)

func file_OpenCue_proto_cue_proto_rawDescGZIP() []byte {
	file_OpenCue_proto_cue_proto_rawDescOnce.Do(func() {
		file_OpenCue_proto_cue_proto_rawDescData = protoimpl.X.CompressGZIP(file_OpenCue_proto_cue_proto_rawDescData)
	})
	return file_OpenCue_proto_cue_proto_rawDescData
}

var file_OpenCue_proto_cue_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_OpenCue_proto_cue_proto_goTypes = []interface{}{
	(*SystemStats)(nil),               // 0: cue.SystemStats
	(*CueGetSystemStatsRequest)(nil),  // 1: cue.CueGetSystemStatsRequest
	(*CueGetSystemStatsResponse)(nil), // 2: cue.CueGetSystemStatsResponse
}
var file_OpenCue_proto_cue_proto_depIdxs = []int32{
	0, // 0: cue.CueGetSystemStatsResponse.stats:type_name -> cue.SystemStats
	1, // 1: cue.CueInterface.GetSystemStats:input_type -> cue.CueGetSystemStatsRequest
	2, // 2: cue.CueInterface.GetSystemStats:output_type -> cue.CueGetSystemStatsResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_OpenCue_proto_cue_proto_init() }
func file_OpenCue_proto_cue_proto_init() {
	if File_OpenCue_proto_cue_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_OpenCue_proto_cue_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OpenCue_proto_cue_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CueGetSystemStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OpenCue_proto_cue_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CueGetSystemStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_OpenCue_proto_cue_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_OpenCue_proto_cue_proto_goTypes,
		DependencyIndexes: file_OpenCue_proto_cue_proto_depIdxs,
		MessageInfos:      file_OpenCue_proto_cue_proto_msgTypes,
	}.Build()
	File_OpenCue_proto_cue_proto = out.File
	file_OpenCue_proto_cue_proto_rawDesc = nil
	file_OpenCue_proto_cue_proto_goTypes = nil
	file_OpenCue_proto_cue_proto_depIdxs = nil
}
