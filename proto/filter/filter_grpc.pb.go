// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: OpenCue/proto/filter.proto

package filter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ActionInterface_Commit_FullMethodName          = "/filter.ActionInterface/Commit"
	ActionInterface_Delete_FullMethodName          = "/filter.ActionInterface/Delete"
	ActionInterface_GetParentFilter_FullMethodName = "/filter.ActionInterface/GetParentFilter"
)

// ActionInterfaceClient is the client API for ActionInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionInterfaceClient interface {
	// Sets new properties for the [Action] on the server side using a [ActionData] object.
	Commit(ctx context.Context, in *ActionCommitRequest, opts ...grpc.CallOption) (*ActionCommitResponse, error)
	// Delete this [Action]
	Delete(ctx context.Context, in *ActionDeleteRequest, opts ...grpc.CallOption) (*ActionDeleteResponse, error)
	// Returns the [Filter] this action is part of.
	GetParentFilter(ctx context.Context, in *ActionGetParentFilterRequest, opts ...grpc.CallOption) (*ActionGetParentFilterResponse, error)
}

type actionInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewActionInterfaceClient(cc grpc.ClientConnInterface) ActionInterfaceClient {
	return &actionInterfaceClient{cc}
}

func (c *actionInterfaceClient) Commit(ctx context.Context, in *ActionCommitRequest, opts ...grpc.CallOption) (*ActionCommitResponse, error) {
	out := new(ActionCommitResponse)
	err := c.cc.Invoke(ctx, ActionInterface_Commit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionInterfaceClient) Delete(ctx context.Context, in *ActionDeleteRequest, opts ...grpc.CallOption) (*ActionDeleteResponse, error) {
	out := new(ActionDeleteResponse)
	err := c.cc.Invoke(ctx, ActionInterface_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionInterfaceClient) GetParentFilter(ctx context.Context, in *ActionGetParentFilterRequest, opts ...grpc.CallOption) (*ActionGetParentFilterResponse, error) {
	out := new(ActionGetParentFilterResponse)
	err := c.cc.Invoke(ctx, ActionInterface_GetParentFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionInterfaceServer is the server API for ActionInterface service.
// All implementations must embed UnimplementedActionInterfaceServer
// for forward compatibility
type ActionInterfaceServer interface {
	// Sets new properties for the [Action] on the server side using a [ActionData] object.
	Commit(context.Context, *ActionCommitRequest) (*ActionCommitResponse, error)
	// Delete this [Action]
	Delete(context.Context, *ActionDeleteRequest) (*ActionDeleteResponse, error)
	// Returns the [Filter] this action is part of.
	GetParentFilter(context.Context, *ActionGetParentFilterRequest) (*ActionGetParentFilterResponse, error)
	mustEmbedUnimplementedActionInterfaceServer()
}

// UnimplementedActionInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedActionInterfaceServer struct {
}

func (UnimplementedActionInterfaceServer) Commit(context.Context, *ActionCommitRequest) (*ActionCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedActionInterfaceServer) Delete(context.Context, *ActionDeleteRequest) (*ActionDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedActionInterfaceServer) GetParentFilter(context.Context, *ActionGetParentFilterRequest) (*ActionGetParentFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParentFilter not implemented")
}
func (UnimplementedActionInterfaceServer) mustEmbedUnimplementedActionInterfaceServer() {}

// UnsafeActionInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionInterfaceServer will
// result in compilation errors.
type UnsafeActionInterfaceServer interface {
	mustEmbedUnimplementedActionInterfaceServer()
}

func RegisterActionInterfaceServer(s grpc.ServiceRegistrar, srv ActionInterfaceServer) {
	s.RegisterService(&ActionInterface_ServiceDesc, srv)
}

func _ActionInterface_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionInterfaceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionInterface_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionInterfaceServer).Commit(ctx, req.(*ActionCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionInterface_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionInterfaceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionInterface_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionInterfaceServer).Delete(ctx, req.(*ActionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionInterface_GetParentFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionGetParentFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionInterfaceServer).GetParentFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionInterface_GetParentFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionInterfaceServer).GetParentFilter(ctx, req.(*ActionGetParentFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActionInterface_ServiceDesc is the grpc.ServiceDesc for ActionInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActionInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filter.ActionInterface",
	HandlerType: (*ActionInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Commit",
			Handler:    _ActionInterface_Commit_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ActionInterface_Delete_Handler,
		},
		{
			MethodName: "GetParentFilter",
			Handler:    _ActionInterface_GetParentFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "OpenCue/proto/filter.proto",
}

const (
	FilterInterface_CreateAction_FullMethodName     = "/filter.FilterInterface/CreateAction"
	FilterInterface_CreateMatcher_FullMethodName    = "/filter.FilterInterface/CreateMatcher"
	FilterInterface_Delete_FullMethodName           = "/filter.FilterInterface/Delete"
	FilterInterface_FindFilter_FullMethodName       = "/filter.FilterInterface/FindFilter"
	FilterInterface_GetActions_FullMethodName       = "/filter.FilterInterface/GetActions"
	FilterInterface_GetMatchers_FullMethodName      = "/filter.FilterInterface/GetMatchers"
	FilterInterface_LowerOrder_FullMethodName       = "/filter.FilterInterface/LowerOrder"
	FilterInterface_OrderFirst_FullMethodName       = "/filter.FilterInterface/OrderFirst"
	FilterInterface_OrderLast_FullMethodName        = "/filter.FilterInterface/OrderLast"
	FilterInterface_RaiseOrder_FullMethodName       = "/filter.FilterInterface/RaiseOrder"
	FilterInterface_RunFilterOnGroup_FullMethodName = "/filter.FilterInterface/RunFilterOnGroup"
	FilterInterface_RunFilterOnJobs_FullMethodName  = "/filter.FilterInterface/RunFilterOnJobs"
	FilterInterface_SetEnabled_FullMethodName       = "/filter.FilterInterface/SetEnabled"
	FilterInterface_SetName_FullMethodName          = "/filter.FilterInterface/SetName"
	FilterInterface_SetOrder_FullMethodName         = "/filter.FilterInterface/SetOrder"
	FilterInterface_SetType_FullMethodName          = "/filter.FilterInterface/SetType"
)

// FilterInterfaceClient is the client API for FilterInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilterInterfaceClient interface {
	// Creates a new [Action] that will execute for this filter.
	CreateAction(ctx context.Context, in *FilterCreateActionRequest, opts ...grpc.CallOption) (*FilterCreateActionResponse, error)
	// Creates a new [Matcher] for this filter.
	CreateMatcher(ctx context.Context, in *FilterCreateMatcherRequest, opts ...grpc.CallOption) (*FilterCreateMatcherResponse, error)
	// Delete this filter.
	Delete(ctx context.Context, in *FilterDeleteRequest, opts ...grpc.CallOption) (*FilterDeleteResponse, error)
	// Find a filter by it's show and name
	FindFilter(ctx context.Context, in *FilterFindFilterRequest, opts ...grpc.CallOption) (*FilterFindFilterResponse, error)
	// Returns a list of [Action]s configured for this filter.
	GetActions(ctx context.Context, in *FilterGetActionsRequest, opts ...grpc.CallOption) (*FilterGetActionsResponse, error)
	// Returns a list of [Matcher]s configured for this filter
	GetMatchers(ctx context.Context, in *FilterGetMatchersRequest, opts ...grpc.CallOption) (*FilterGetMatchersResponse, error)
	// Lowers the order of the filter, this makes it run after the next filter
	LowerOrder(ctx context.Context, in *FilterLowerOrderRequest, opts ...grpc.CallOption) (*FilterLowerOrderResponse, error)
	// Moves the filter to first in the order list.
	OrderFirst(ctx context.Context, in *FilterOrderFirstRequest, opts ...grpc.CallOption) (*FilterOrderFirstResponse, error)
	// Moves the filter to last in the order list.
	OrderLast(ctx context.Context, in *FilterOrderLastRequest, opts ...grpc.CallOption) (*FilterOrderLastResponse, error)
	// Raises the order of the filter, this makes it run before the previous filter.
	RaiseOrder(ctx context.Context, in *FilterRaiseOrderRequest, opts ...grpc.CallOption) (*FilterRaiseOrderResponse, error)
	// Executes the filter on a specified group.
	RunFilterOnGroup(ctx context.Context, in *FilterRunFilterOnGroupRequest, opts ...grpc.CallOption) (*FilterRunFilterOnGroupResponse, error)
	// Executes the filter on a specified sequence of jobs.
	RunFilterOnJobs(ctx context.Context, in *FilterRunFilterOnJobsRequest, opts ...grpc.CallOption) (*FilterRunFilterOnJobsResponse, error)
	// Set the filter to enabled or disabled
	SetEnabled(ctx context.Context, in *FilterSetEnabledRequest, opts ...grpc.CallOption) (*FilterSetEnabledResponse, error)
	// Set the filter name.
	SetName(ctx context.Context, in *FilterSetNameRequest, opts ...grpc.CallOption) (*FilterSetNameResponse, error)
	// Directly sets the order of the filter.
	SetOrder(ctx context.Context, in *FilterSetOrderRequest, opts ...grpc.CallOption) (*FilterSetOrderResponse, error)
	// Set the type of the filter. See FilterType
	SetType(ctx context.Context, in *FilterSetTypeRequest, opts ...grpc.CallOption) (*FilterSetTypeResponse, error)
}

type filterInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilterInterfaceClient(cc grpc.ClientConnInterface) FilterInterfaceClient {
	return &filterInterfaceClient{cc}
}

func (c *filterInterfaceClient) CreateAction(ctx context.Context, in *FilterCreateActionRequest, opts ...grpc.CallOption) (*FilterCreateActionResponse, error) {
	out := new(FilterCreateActionResponse)
	err := c.cc.Invoke(ctx, FilterInterface_CreateAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterInterfaceClient) CreateMatcher(ctx context.Context, in *FilterCreateMatcherRequest, opts ...grpc.CallOption) (*FilterCreateMatcherResponse, error) {
	out := new(FilterCreateMatcherResponse)
	err := c.cc.Invoke(ctx, FilterInterface_CreateMatcher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterInterfaceClient) Delete(ctx context.Context, in *FilterDeleteRequest, opts ...grpc.CallOption) (*FilterDeleteResponse, error) {
	out := new(FilterDeleteResponse)
	err := c.cc.Invoke(ctx, FilterInterface_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterInterfaceClient) FindFilter(ctx context.Context, in *FilterFindFilterRequest, opts ...grpc.CallOption) (*FilterFindFilterResponse, error) {
	out := new(FilterFindFilterResponse)
	err := c.cc.Invoke(ctx, FilterInterface_FindFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterInterfaceClient) GetActions(ctx context.Context, in *FilterGetActionsRequest, opts ...grpc.CallOption) (*FilterGetActionsResponse, error) {
	out := new(FilterGetActionsResponse)
	err := c.cc.Invoke(ctx, FilterInterface_GetActions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterInterfaceClient) GetMatchers(ctx context.Context, in *FilterGetMatchersRequest, opts ...grpc.CallOption) (*FilterGetMatchersResponse, error) {
	out := new(FilterGetMatchersResponse)
	err := c.cc.Invoke(ctx, FilterInterface_GetMatchers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterInterfaceClient) LowerOrder(ctx context.Context, in *FilterLowerOrderRequest, opts ...grpc.CallOption) (*FilterLowerOrderResponse, error) {
	out := new(FilterLowerOrderResponse)
	err := c.cc.Invoke(ctx, FilterInterface_LowerOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterInterfaceClient) OrderFirst(ctx context.Context, in *FilterOrderFirstRequest, opts ...grpc.CallOption) (*FilterOrderFirstResponse, error) {
	out := new(FilterOrderFirstResponse)
	err := c.cc.Invoke(ctx, FilterInterface_OrderFirst_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterInterfaceClient) OrderLast(ctx context.Context, in *FilterOrderLastRequest, opts ...grpc.CallOption) (*FilterOrderLastResponse, error) {
	out := new(FilterOrderLastResponse)
	err := c.cc.Invoke(ctx, FilterInterface_OrderLast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterInterfaceClient) RaiseOrder(ctx context.Context, in *FilterRaiseOrderRequest, opts ...grpc.CallOption) (*FilterRaiseOrderResponse, error) {
	out := new(FilterRaiseOrderResponse)
	err := c.cc.Invoke(ctx, FilterInterface_RaiseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterInterfaceClient) RunFilterOnGroup(ctx context.Context, in *FilterRunFilterOnGroupRequest, opts ...grpc.CallOption) (*FilterRunFilterOnGroupResponse, error) {
	out := new(FilterRunFilterOnGroupResponse)
	err := c.cc.Invoke(ctx, FilterInterface_RunFilterOnGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterInterfaceClient) RunFilterOnJobs(ctx context.Context, in *FilterRunFilterOnJobsRequest, opts ...grpc.CallOption) (*FilterRunFilterOnJobsResponse, error) {
	out := new(FilterRunFilterOnJobsResponse)
	err := c.cc.Invoke(ctx, FilterInterface_RunFilterOnJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterInterfaceClient) SetEnabled(ctx context.Context, in *FilterSetEnabledRequest, opts ...grpc.CallOption) (*FilterSetEnabledResponse, error) {
	out := new(FilterSetEnabledResponse)
	err := c.cc.Invoke(ctx, FilterInterface_SetEnabled_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterInterfaceClient) SetName(ctx context.Context, in *FilterSetNameRequest, opts ...grpc.CallOption) (*FilterSetNameResponse, error) {
	out := new(FilterSetNameResponse)
	err := c.cc.Invoke(ctx, FilterInterface_SetName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterInterfaceClient) SetOrder(ctx context.Context, in *FilterSetOrderRequest, opts ...grpc.CallOption) (*FilterSetOrderResponse, error) {
	out := new(FilterSetOrderResponse)
	err := c.cc.Invoke(ctx, FilterInterface_SetOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterInterfaceClient) SetType(ctx context.Context, in *FilterSetTypeRequest, opts ...grpc.CallOption) (*FilterSetTypeResponse, error) {
	out := new(FilterSetTypeResponse)
	err := c.cc.Invoke(ctx, FilterInterface_SetType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilterInterfaceServer is the server API for FilterInterface service.
// All implementations must embed UnimplementedFilterInterfaceServer
// for forward compatibility
type FilterInterfaceServer interface {
	// Creates a new [Action] that will execute for this filter.
	CreateAction(context.Context, *FilterCreateActionRequest) (*FilterCreateActionResponse, error)
	// Creates a new [Matcher] for this filter.
	CreateMatcher(context.Context, *FilterCreateMatcherRequest) (*FilterCreateMatcherResponse, error)
	// Delete this filter.
	Delete(context.Context, *FilterDeleteRequest) (*FilterDeleteResponse, error)
	// Find a filter by it's show and name
	FindFilter(context.Context, *FilterFindFilterRequest) (*FilterFindFilterResponse, error)
	// Returns a list of [Action]s configured for this filter.
	GetActions(context.Context, *FilterGetActionsRequest) (*FilterGetActionsResponse, error)
	// Returns a list of [Matcher]s configured for this filter
	GetMatchers(context.Context, *FilterGetMatchersRequest) (*FilterGetMatchersResponse, error)
	// Lowers the order of the filter, this makes it run after the next filter
	LowerOrder(context.Context, *FilterLowerOrderRequest) (*FilterLowerOrderResponse, error)
	// Moves the filter to first in the order list.
	OrderFirst(context.Context, *FilterOrderFirstRequest) (*FilterOrderFirstResponse, error)
	// Moves the filter to last in the order list.
	OrderLast(context.Context, *FilterOrderLastRequest) (*FilterOrderLastResponse, error)
	// Raises the order of the filter, this makes it run before the previous filter.
	RaiseOrder(context.Context, *FilterRaiseOrderRequest) (*FilterRaiseOrderResponse, error)
	// Executes the filter on a specified group.
	RunFilterOnGroup(context.Context, *FilterRunFilterOnGroupRequest) (*FilterRunFilterOnGroupResponse, error)
	// Executes the filter on a specified sequence of jobs.
	RunFilterOnJobs(context.Context, *FilterRunFilterOnJobsRequest) (*FilterRunFilterOnJobsResponse, error)
	// Set the filter to enabled or disabled
	SetEnabled(context.Context, *FilterSetEnabledRequest) (*FilterSetEnabledResponse, error)
	// Set the filter name.
	SetName(context.Context, *FilterSetNameRequest) (*FilterSetNameResponse, error)
	// Directly sets the order of the filter.
	SetOrder(context.Context, *FilterSetOrderRequest) (*FilterSetOrderResponse, error)
	// Set the type of the filter. See FilterType
	SetType(context.Context, *FilterSetTypeRequest) (*FilterSetTypeResponse, error)
	mustEmbedUnimplementedFilterInterfaceServer()
}

// UnimplementedFilterInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedFilterInterfaceServer struct {
}

func (UnimplementedFilterInterfaceServer) CreateAction(context.Context, *FilterCreateActionRequest) (*FilterCreateActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAction not implemented")
}
func (UnimplementedFilterInterfaceServer) CreateMatcher(context.Context, *FilterCreateMatcherRequest) (*FilterCreateMatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMatcher not implemented")
}
func (UnimplementedFilterInterfaceServer) Delete(context.Context, *FilterDeleteRequest) (*FilterDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFilterInterfaceServer) FindFilter(context.Context, *FilterFindFilterRequest) (*FilterFindFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFilter not implemented")
}
func (UnimplementedFilterInterfaceServer) GetActions(context.Context, *FilterGetActionsRequest) (*FilterGetActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActions not implemented")
}
func (UnimplementedFilterInterfaceServer) GetMatchers(context.Context, *FilterGetMatchersRequest) (*FilterGetMatchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchers not implemented")
}
func (UnimplementedFilterInterfaceServer) LowerOrder(context.Context, *FilterLowerOrderRequest) (*FilterLowerOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LowerOrder not implemented")
}
func (UnimplementedFilterInterfaceServer) OrderFirst(context.Context, *FilterOrderFirstRequest) (*FilterOrderFirstResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderFirst not implemented")
}
func (UnimplementedFilterInterfaceServer) OrderLast(context.Context, *FilterOrderLastRequest) (*FilterOrderLastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderLast not implemented")
}
func (UnimplementedFilterInterfaceServer) RaiseOrder(context.Context, *FilterRaiseOrderRequest) (*FilterRaiseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaiseOrder not implemented")
}
func (UnimplementedFilterInterfaceServer) RunFilterOnGroup(context.Context, *FilterRunFilterOnGroupRequest) (*FilterRunFilterOnGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunFilterOnGroup not implemented")
}
func (UnimplementedFilterInterfaceServer) RunFilterOnJobs(context.Context, *FilterRunFilterOnJobsRequest) (*FilterRunFilterOnJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunFilterOnJobs not implemented")
}
func (UnimplementedFilterInterfaceServer) SetEnabled(context.Context, *FilterSetEnabledRequest) (*FilterSetEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnabled not implemented")
}
func (UnimplementedFilterInterfaceServer) SetName(context.Context, *FilterSetNameRequest) (*FilterSetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetName not implemented")
}
func (UnimplementedFilterInterfaceServer) SetOrder(context.Context, *FilterSetOrderRequest) (*FilterSetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrder not implemented")
}
func (UnimplementedFilterInterfaceServer) SetType(context.Context, *FilterSetTypeRequest) (*FilterSetTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetType not implemented")
}
func (UnimplementedFilterInterfaceServer) mustEmbedUnimplementedFilterInterfaceServer() {}

// UnsafeFilterInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilterInterfaceServer will
// result in compilation errors.
type UnsafeFilterInterfaceServer interface {
	mustEmbedUnimplementedFilterInterfaceServer()
}

func RegisterFilterInterfaceServer(s grpc.ServiceRegistrar, srv FilterInterfaceServer) {
	s.RegisterService(&FilterInterface_ServiceDesc, srv)
}

func _FilterInterface_CreateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterCreateActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterInterfaceServer).CreateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterInterface_CreateAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterInterfaceServer).CreateAction(ctx, req.(*FilterCreateActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterInterface_CreateMatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterCreateMatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterInterfaceServer).CreateMatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterInterface_CreateMatcher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterInterfaceServer).CreateMatcher(ctx, req.(*FilterCreateMatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterInterface_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterInterfaceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterInterface_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterInterfaceServer).Delete(ctx, req.(*FilterDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterInterface_FindFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterFindFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterInterfaceServer).FindFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterInterface_FindFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterInterfaceServer).FindFilter(ctx, req.(*FilterFindFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterInterface_GetActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterGetActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterInterfaceServer).GetActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterInterface_GetActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterInterfaceServer).GetActions(ctx, req.(*FilterGetActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterInterface_GetMatchers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterGetMatchersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterInterfaceServer).GetMatchers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterInterface_GetMatchers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterInterfaceServer).GetMatchers(ctx, req.(*FilterGetMatchersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterInterface_LowerOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterLowerOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterInterfaceServer).LowerOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterInterface_LowerOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterInterfaceServer).LowerOrder(ctx, req.(*FilterLowerOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterInterface_OrderFirst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOrderFirstRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterInterfaceServer).OrderFirst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterInterface_OrderFirst_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterInterfaceServer).OrderFirst(ctx, req.(*FilterOrderFirstRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterInterface_OrderLast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOrderLastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterInterfaceServer).OrderLast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterInterface_OrderLast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterInterfaceServer).OrderLast(ctx, req.(*FilterOrderLastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterInterface_RaiseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRaiseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterInterfaceServer).RaiseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterInterface_RaiseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterInterfaceServer).RaiseOrder(ctx, req.(*FilterRaiseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterInterface_RunFilterOnGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRunFilterOnGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterInterfaceServer).RunFilterOnGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterInterface_RunFilterOnGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterInterfaceServer).RunFilterOnGroup(ctx, req.(*FilterRunFilterOnGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterInterface_RunFilterOnJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRunFilterOnJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterInterfaceServer).RunFilterOnJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterInterface_RunFilterOnJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterInterfaceServer).RunFilterOnJobs(ctx, req.(*FilterRunFilterOnJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterInterface_SetEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterSetEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterInterfaceServer).SetEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterInterface_SetEnabled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterInterfaceServer).SetEnabled(ctx, req.(*FilterSetEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterInterface_SetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterSetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterInterfaceServer).SetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterInterface_SetName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterInterfaceServer).SetName(ctx, req.(*FilterSetNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterInterface_SetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterSetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterInterfaceServer).SetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterInterface_SetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterInterfaceServer).SetOrder(ctx, req.(*FilterSetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterInterface_SetType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterSetTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterInterfaceServer).SetType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilterInterface_SetType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterInterfaceServer).SetType(ctx, req.(*FilterSetTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilterInterface_ServiceDesc is the grpc.ServiceDesc for FilterInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilterInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filter.FilterInterface",
	HandlerType: (*FilterInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAction",
			Handler:    _FilterInterface_CreateAction_Handler,
		},
		{
			MethodName: "CreateMatcher",
			Handler:    _FilterInterface_CreateMatcher_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FilterInterface_Delete_Handler,
		},
		{
			MethodName: "FindFilter",
			Handler:    _FilterInterface_FindFilter_Handler,
		},
		{
			MethodName: "GetActions",
			Handler:    _FilterInterface_GetActions_Handler,
		},
		{
			MethodName: "GetMatchers",
			Handler:    _FilterInterface_GetMatchers_Handler,
		},
		{
			MethodName: "LowerOrder",
			Handler:    _FilterInterface_LowerOrder_Handler,
		},
		{
			MethodName: "OrderFirst",
			Handler:    _FilterInterface_OrderFirst_Handler,
		},
		{
			MethodName: "OrderLast",
			Handler:    _FilterInterface_OrderLast_Handler,
		},
		{
			MethodName: "RaiseOrder",
			Handler:    _FilterInterface_RaiseOrder_Handler,
		},
		{
			MethodName: "RunFilterOnGroup",
			Handler:    _FilterInterface_RunFilterOnGroup_Handler,
		},
		{
			MethodName: "RunFilterOnJobs",
			Handler:    _FilterInterface_RunFilterOnJobs_Handler,
		},
		{
			MethodName: "SetEnabled",
			Handler:    _FilterInterface_SetEnabled_Handler,
		},
		{
			MethodName: "SetName",
			Handler:    _FilterInterface_SetName_Handler,
		},
		{
			MethodName: "SetOrder",
			Handler:    _FilterInterface_SetOrder_Handler,
		},
		{
			MethodName: "SetType",
			Handler:    _FilterInterface_SetType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "OpenCue/proto/filter.proto",
}

const (
	MatcherInterface_Commit_FullMethodName          = "/filter.MatcherInterface/Commit"
	MatcherInterface_Delete_FullMethodName          = "/filter.MatcherInterface/Delete"
	MatcherInterface_GetParentFilter_FullMethodName = "/filter.MatcherInterface/GetParentFilter"
)

// MatcherInterfaceClient is the client API for MatcherInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatcherInterfaceClient interface {
	// Sets new properties for the [Matcher] on the server side using a [MatcherData] object.
	Commit(ctx context.Context, in *MatcherCommitRequest, opts ...grpc.CallOption) (*MatcherCommitResponse, error)
	// Delete this matcher.
	Delete(ctx context.Context, in *MatcherDeleteRequest, opts ...grpc.CallOption) (*MatcherDeleteResponse, error)
	// Returns the [Filter] this matcher is part of.
	GetParentFilter(ctx context.Context, in *MatcherGetParentFilterRequest, opts ...grpc.CallOption) (*MatcherGetParentFilterResponse, error)
}

type matcherInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatcherInterfaceClient(cc grpc.ClientConnInterface) MatcherInterfaceClient {
	return &matcherInterfaceClient{cc}
}

func (c *matcherInterfaceClient) Commit(ctx context.Context, in *MatcherCommitRequest, opts ...grpc.CallOption) (*MatcherCommitResponse, error) {
	out := new(MatcherCommitResponse)
	err := c.cc.Invoke(ctx, MatcherInterface_Commit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matcherInterfaceClient) Delete(ctx context.Context, in *MatcherDeleteRequest, opts ...grpc.CallOption) (*MatcherDeleteResponse, error) {
	out := new(MatcherDeleteResponse)
	err := c.cc.Invoke(ctx, MatcherInterface_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matcherInterfaceClient) GetParentFilter(ctx context.Context, in *MatcherGetParentFilterRequest, opts ...grpc.CallOption) (*MatcherGetParentFilterResponse, error) {
	out := new(MatcherGetParentFilterResponse)
	err := c.cc.Invoke(ctx, MatcherInterface_GetParentFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatcherInterfaceServer is the server API for MatcherInterface service.
// All implementations must embed UnimplementedMatcherInterfaceServer
// for forward compatibility
type MatcherInterfaceServer interface {
	// Sets new properties for the [Matcher] on the server side using a [MatcherData] object.
	Commit(context.Context, *MatcherCommitRequest) (*MatcherCommitResponse, error)
	// Delete this matcher.
	Delete(context.Context, *MatcherDeleteRequest) (*MatcherDeleteResponse, error)
	// Returns the [Filter] this matcher is part of.
	GetParentFilter(context.Context, *MatcherGetParentFilterRequest) (*MatcherGetParentFilterResponse, error)
	mustEmbedUnimplementedMatcherInterfaceServer()
}

// UnimplementedMatcherInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedMatcherInterfaceServer struct {
}

func (UnimplementedMatcherInterfaceServer) Commit(context.Context, *MatcherCommitRequest) (*MatcherCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedMatcherInterfaceServer) Delete(context.Context, *MatcherDeleteRequest) (*MatcherDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMatcherInterfaceServer) GetParentFilter(context.Context, *MatcherGetParentFilterRequest) (*MatcherGetParentFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParentFilter not implemented")
}
func (UnimplementedMatcherInterfaceServer) mustEmbedUnimplementedMatcherInterfaceServer() {}

// UnsafeMatcherInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatcherInterfaceServer will
// result in compilation errors.
type UnsafeMatcherInterfaceServer interface {
	mustEmbedUnimplementedMatcherInterfaceServer()
}

func RegisterMatcherInterfaceServer(s grpc.ServiceRegistrar, srv MatcherInterfaceServer) {
	s.RegisterService(&MatcherInterface_ServiceDesc, srv)
}

func _MatcherInterface_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatcherCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatcherInterfaceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatcherInterface_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatcherInterfaceServer).Commit(ctx, req.(*MatcherCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatcherInterface_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatcherDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatcherInterfaceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatcherInterface_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatcherInterfaceServer).Delete(ctx, req.(*MatcherDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatcherInterface_GetParentFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatcherGetParentFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatcherInterfaceServer).GetParentFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatcherInterface_GetParentFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatcherInterfaceServer).GetParentFilter(ctx, req.(*MatcherGetParentFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatcherInterface_ServiceDesc is the grpc.ServiceDesc for MatcherInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatcherInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filter.MatcherInterface",
	HandlerType: (*MatcherInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Commit",
			Handler:    _MatcherInterface_Commit_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MatcherInterface_Delete_Handler,
		},
		{
			MethodName: "GetParentFilter",
			Handler:    _MatcherInterface_GetParentFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "OpenCue/proto/filter.proto",
}
