// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: OpenCue/proto/report.proto

package report

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RqdReportInterface_ReportRqdStartup_FullMethodName             = "/report.RqdReportInterface/ReportRqdStartup"
	RqdReportInterface_ReportRunningFrameCompletion_FullMethodName = "/report.RqdReportInterface/ReportRunningFrameCompletion"
	RqdReportInterface_ReportStatus_FullMethodName                 = "/report.RqdReportInterface/ReportStatus"
)

// RqdReportInterfaceClient is the client API for RqdReportInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RqdReportInterfaceClient interface {
	// Send in when RQD starts up to announce new idle procs to the cue.
	ReportRqdStartup(ctx context.Context, in *RqdReportRqdStartupRequest, opts ...grpc.CallOption) (*RqdReportRqdStartupResponse, error)
	// Reports in a running frame
	ReportRunningFrameCompletion(ctx context.Context, in *RqdReportRunningFrameCompletionRequest, opts ...grpc.CallOption) (*RqdReportRunningFrameCompletionResponse, error)
	// An incremental status report sent by RQD
	ReportStatus(ctx context.Context, in *RqdReportStatusRequest, opts ...grpc.CallOption) (*RqdReportStatusResponse, error)
}

type rqdReportInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewRqdReportInterfaceClient(cc grpc.ClientConnInterface) RqdReportInterfaceClient {
	return &rqdReportInterfaceClient{cc}
}

func (c *rqdReportInterfaceClient) ReportRqdStartup(ctx context.Context, in *RqdReportRqdStartupRequest, opts ...grpc.CallOption) (*RqdReportRqdStartupResponse, error) {
	out := new(RqdReportRqdStartupResponse)
	err := c.cc.Invoke(ctx, RqdReportInterface_ReportRqdStartup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqdReportInterfaceClient) ReportRunningFrameCompletion(ctx context.Context, in *RqdReportRunningFrameCompletionRequest, opts ...grpc.CallOption) (*RqdReportRunningFrameCompletionResponse, error) {
	out := new(RqdReportRunningFrameCompletionResponse)
	err := c.cc.Invoke(ctx, RqdReportInterface_ReportRunningFrameCompletion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqdReportInterfaceClient) ReportStatus(ctx context.Context, in *RqdReportStatusRequest, opts ...grpc.CallOption) (*RqdReportStatusResponse, error) {
	out := new(RqdReportStatusResponse)
	err := c.cc.Invoke(ctx, RqdReportInterface_ReportStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RqdReportInterfaceServer is the server API for RqdReportInterface service.
// All implementations must embed UnimplementedRqdReportInterfaceServer
// for forward compatibility
type RqdReportInterfaceServer interface {
	// Send in when RQD starts up to announce new idle procs to the cue.
	ReportRqdStartup(context.Context, *RqdReportRqdStartupRequest) (*RqdReportRqdStartupResponse, error)
	// Reports in a running frame
	ReportRunningFrameCompletion(context.Context, *RqdReportRunningFrameCompletionRequest) (*RqdReportRunningFrameCompletionResponse, error)
	// An incremental status report sent by RQD
	ReportStatus(context.Context, *RqdReportStatusRequest) (*RqdReportStatusResponse, error)
	mustEmbedUnimplementedRqdReportInterfaceServer()
}

// UnimplementedRqdReportInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedRqdReportInterfaceServer struct {
}

func (UnimplementedRqdReportInterfaceServer) ReportRqdStartup(context.Context, *RqdReportRqdStartupRequest) (*RqdReportRqdStartupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportRqdStartup not implemented")
}
func (UnimplementedRqdReportInterfaceServer) ReportRunningFrameCompletion(context.Context, *RqdReportRunningFrameCompletionRequest) (*RqdReportRunningFrameCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportRunningFrameCompletion not implemented")
}
func (UnimplementedRqdReportInterfaceServer) ReportStatus(context.Context, *RqdReportStatusRequest) (*RqdReportStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportStatus not implemented")
}
func (UnimplementedRqdReportInterfaceServer) mustEmbedUnimplementedRqdReportInterfaceServer() {}

// UnsafeRqdReportInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RqdReportInterfaceServer will
// result in compilation errors.
type UnsafeRqdReportInterfaceServer interface {
	mustEmbedUnimplementedRqdReportInterfaceServer()
}

func RegisterRqdReportInterfaceServer(s grpc.ServiceRegistrar, srv RqdReportInterfaceServer) {
	s.RegisterService(&RqdReportInterface_ServiceDesc, srv)
}

func _RqdReportInterface_ReportRqdStartup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdReportRqdStartupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdReportInterfaceServer).ReportRqdStartup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdReportInterface_ReportRqdStartup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdReportInterfaceServer).ReportRqdStartup(ctx, req.(*RqdReportRqdStartupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RqdReportInterface_ReportRunningFrameCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdReportRunningFrameCompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdReportInterfaceServer).ReportRunningFrameCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdReportInterface_ReportRunningFrameCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdReportInterfaceServer).ReportRunningFrameCompletion(ctx, req.(*RqdReportRunningFrameCompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RqdReportInterface_ReportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdReportStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdReportInterfaceServer).ReportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdReportInterface_ReportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdReportInterfaceServer).ReportStatus(ctx, req.(*RqdReportStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RqdReportInterface_ServiceDesc is the grpc.ServiceDesc for RqdReportInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RqdReportInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "report.RqdReportInterface",
	HandlerType: (*RqdReportInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportRqdStartup",
			Handler:    _RqdReportInterface_ReportRqdStartup_Handler,
		},
		{
			MethodName: "ReportRunningFrameCompletion",
			Handler:    _RqdReportInterface_ReportRunningFrameCompletion_Handler,
		},
		{
			MethodName: "ReportStatus",
			Handler:    _RqdReportInterface_ReportStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "OpenCue/proto/report.proto",
}
