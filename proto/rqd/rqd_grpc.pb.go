// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: OpenCue/proto/rqd.proto

package rqd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RqdInterface_GetRunFrame_FullMethodName           = "/rqd.RqdInterface/GetRunFrame"
	RqdInterface_GetRunningFrameStatus_FullMethodName = "/rqd.RqdInterface/GetRunningFrameStatus"
	RqdInterface_KillRunningFrame_FullMethodName      = "/rqd.RqdInterface/KillRunningFrame"
	RqdInterface_LaunchFrame_FullMethodName           = "/rqd.RqdInterface/LaunchFrame"
	RqdInterface_Lock_FullMethodName                  = "/rqd.RqdInterface/Lock"
	RqdInterface_LockAll_FullMethodName               = "/rqd.RqdInterface/LockAll"
	RqdInterface_NimbyOff_FullMethodName              = "/rqd.RqdInterface/NimbyOff"
	RqdInterface_NimbyOn_FullMethodName               = "/rqd.RqdInterface/NimbyOn"
	RqdInterface_RebootIdle_FullMethodName            = "/rqd.RqdInterface/RebootIdle"
	RqdInterface_RebootNow_FullMethodName             = "/rqd.RqdInterface/RebootNow"
	RqdInterface_ReportStatus_FullMethodName          = "/rqd.RqdInterface/ReportStatus"
	RqdInterface_RestartRqdIdle_FullMethodName        = "/rqd.RqdInterface/RestartRqdIdle"
	RqdInterface_RestartRqdNow_FullMethodName         = "/rqd.RqdInterface/RestartRqdNow"
	RqdInterface_ShutdownRqdIdle_FullMethodName       = "/rqd.RqdInterface/ShutdownRqdIdle"
	RqdInterface_ShutdownRqdNow_FullMethodName        = "/rqd.RqdInterface/ShutdownRqdNow"
	RqdInterface_Unlock_FullMethodName                = "/rqd.RqdInterface/Unlock"
	RqdInterface_UnlockAll_FullMethodName             = "/rqd.RqdInterface/UnlockAll"
)

// RqdInterfaceClient is the client API for RqdInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RqdInterfaceClient interface {
	// Return the RunFrame by id
	GetRunFrame(ctx context.Context, in *RqdStaticGetRunFrameRequest, opts ...grpc.CallOption) (*RqdStaticGetRunFrameResponse, error)
	// Return the RunningFrameStatus report
	GetRunningFrameStatus(ctx context.Context, in *RqdStaticGetRunningFrameStatusRequest, opts ...grpc.CallOption) (*RqdStaticGetRunningFrameStatusResponse, error)
	// Kill the running frame by frame id
	KillRunningFrame(ctx context.Context, in *RqdStaticKillRunningFrameRequest, opts ...grpc.CallOption) (*RqdStaticKillRunningFrameResponse, error)
	// Launch a new running frame
	LaunchFrame(ctx context.Context, in *RqdStaticLaunchFrameRequest, opts ...grpc.CallOption) (*RqdStaticLaunchFrameResponse, error)
	// Lock a number of cores
	Lock(ctx context.Context, in *RqdStaticLockRequest, opts ...grpc.CallOption) (*RqdStaticLockResponse, error)
	// Lock all
	LockAll(ctx context.Context, in *RqdStaticLockAllRequest, opts ...grpc.CallOption) (*RqdStaticLockAllResponse, error)
	// Disable NIMBY on host
	NimbyOff(ctx context.Context, in *RqdStaticNimbyOffRequest, opts ...grpc.CallOption) (*RqdStaticNimbyOffResponse, error)
	// Enable NIMBY on host
	NimbyOn(ctx context.Context, in *RqdStaticNimbyOnRequest, opts ...grpc.CallOption) (*RqdStaticNimbyOnResponse, error)
	// Reboot the host when it becomes idle
	RebootIdle(ctx context.Context, in *RqdStaticRebootIdleRequest, opts ...grpc.CallOption) (*RqdStaticRebootIdleResponse, error)
	// Reboot the host now
	RebootNow(ctx context.Context, in *RqdStaticRebootNowRequest, opts ...grpc.CallOption) (*RqdStaticRebootNowResponse, error)
	// Return the HostReport
	ReportStatus(ctx context.Context, in *RqdStaticReportStatusRequest, opts ...grpc.CallOption) (*RqdStaticReportStatusResponse, error)
	// Restart the rqd process when it becomes idle
	RestartRqdIdle(ctx context.Context, in *RqdStaticRestartIdleRequest, opts ...grpc.CallOption) (*RqdStaticRestartIdleResponse, error)
	// Restart rqd process now
	RestartRqdNow(ctx context.Context, in *RqdStaticRestartNowRequest, opts ...grpc.CallOption) (*RqdStaticRestartNowResponse, error)
	// Turn off rqd when it becomes idle
	ShutdownRqdIdle(ctx context.Context, in *RqdStaticShutdownIdleRequest, opts ...grpc.CallOption) (*RqdStaticShutdownIdleResponse, error)
	// Stop rqd now
	ShutdownRqdNow(ctx context.Context, in *RqdStaticShutdownNowRequest, opts ...grpc.CallOption) (*RqdStaticShutdownNowResponse, error)
	// Unlock a number of cores
	Unlock(ctx context.Context, in *RqdStaticUnlockRequest, opts ...grpc.CallOption) (*RqdStaticUnlockResponse, error)
	// Unlock all cores
	UnlockAll(ctx context.Context, in *RqdStaticUnlockAllRequest, opts ...grpc.CallOption) (*RqdStaticUnlockAllResponse, error)
}

type rqdInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewRqdInterfaceClient(cc grpc.ClientConnInterface) RqdInterfaceClient {
	return &rqdInterfaceClient{cc}
}

func (c *rqdInterfaceClient) GetRunFrame(ctx context.Context, in *RqdStaticGetRunFrameRequest, opts ...grpc.CallOption) (*RqdStaticGetRunFrameResponse, error) {
	out := new(RqdStaticGetRunFrameResponse)
	err := c.cc.Invoke(ctx, RqdInterface_GetRunFrame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqdInterfaceClient) GetRunningFrameStatus(ctx context.Context, in *RqdStaticGetRunningFrameStatusRequest, opts ...grpc.CallOption) (*RqdStaticGetRunningFrameStatusResponse, error) {
	out := new(RqdStaticGetRunningFrameStatusResponse)
	err := c.cc.Invoke(ctx, RqdInterface_GetRunningFrameStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqdInterfaceClient) KillRunningFrame(ctx context.Context, in *RqdStaticKillRunningFrameRequest, opts ...grpc.CallOption) (*RqdStaticKillRunningFrameResponse, error) {
	out := new(RqdStaticKillRunningFrameResponse)
	err := c.cc.Invoke(ctx, RqdInterface_KillRunningFrame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqdInterfaceClient) LaunchFrame(ctx context.Context, in *RqdStaticLaunchFrameRequest, opts ...grpc.CallOption) (*RqdStaticLaunchFrameResponse, error) {
	out := new(RqdStaticLaunchFrameResponse)
	err := c.cc.Invoke(ctx, RqdInterface_LaunchFrame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqdInterfaceClient) Lock(ctx context.Context, in *RqdStaticLockRequest, opts ...grpc.CallOption) (*RqdStaticLockResponse, error) {
	out := new(RqdStaticLockResponse)
	err := c.cc.Invoke(ctx, RqdInterface_Lock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqdInterfaceClient) LockAll(ctx context.Context, in *RqdStaticLockAllRequest, opts ...grpc.CallOption) (*RqdStaticLockAllResponse, error) {
	out := new(RqdStaticLockAllResponse)
	err := c.cc.Invoke(ctx, RqdInterface_LockAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqdInterfaceClient) NimbyOff(ctx context.Context, in *RqdStaticNimbyOffRequest, opts ...grpc.CallOption) (*RqdStaticNimbyOffResponse, error) {
	out := new(RqdStaticNimbyOffResponse)
	err := c.cc.Invoke(ctx, RqdInterface_NimbyOff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqdInterfaceClient) NimbyOn(ctx context.Context, in *RqdStaticNimbyOnRequest, opts ...grpc.CallOption) (*RqdStaticNimbyOnResponse, error) {
	out := new(RqdStaticNimbyOnResponse)
	err := c.cc.Invoke(ctx, RqdInterface_NimbyOn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqdInterfaceClient) RebootIdle(ctx context.Context, in *RqdStaticRebootIdleRequest, opts ...grpc.CallOption) (*RqdStaticRebootIdleResponse, error) {
	out := new(RqdStaticRebootIdleResponse)
	err := c.cc.Invoke(ctx, RqdInterface_RebootIdle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqdInterfaceClient) RebootNow(ctx context.Context, in *RqdStaticRebootNowRequest, opts ...grpc.CallOption) (*RqdStaticRebootNowResponse, error) {
	out := new(RqdStaticRebootNowResponse)
	err := c.cc.Invoke(ctx, RqdInterface_RebootNow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqdInterfaceClient) ReportStatus(ctx context.Context, in *RqdStaticReportStatusRequest, opts ...grpc.CallOption) (*RqdStaticReportStatusResponse, error) {
	out := new(RqdStaticReportStatusResponse)
	err := c.cc.Invoke(ctx, RqdInterface_ReportStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqdInterfaceClient) RestartRqdIdle(ctx context.Context, in *RqdStaticRestartIdleRequest, opts ...grpc.CallOption) (*RqdStaticRestartIdleResponse, error) {
	out := new(RqdStaticRestartIdleResponse)
	err := c.cc.Invoke(ctx, RqdInterface_RestartRqdIdle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqdInterfaceClient) RestartRqdNow(ctx context.Context, in *RqdStaticRestartNowRequest, opts ...grpc.CallOption) (*RqdStaticRestartNowResponse, error) {
	out := new(RqdStaticRestartNowResponse)
	err := c.cc.Invoke(ctx, RqdInterface_RestartRqdNow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqdInterfaceClient) ShutdownRqdIdle(ctx context.Context, in *RqdStaticShutdownIdleRequest, opts ...grpc.CallOption) (*RqdStaticShutdownIdleResponse, error) {
	out := new(RqdStaticShutdownIdleResponse)
	err := c.cc.Invoke(ctx, RqdInterface_ShutdownRqdIdle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqdInterfaceClient) ShutdownRqdNow(ctx context.Context, in *RqdStaticShutdownNowRequest, opts ...grpc.CallOption) (*RqdStaticShutdownNowResponse, error) {
	out := new(RqdStaticShutdownNowResponse)
	err := c.cc.Invoke(ctx, RqdInterface_ShutdownRqdNow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqdInterfaceClient) Unlock(ctx context.Context, in *RqdStaticUnlockRequest, opts ...grpc.CallOption) (*RqdStaticUnlockResponse, error) {
	out := new(RqdStaticUnlockResponse)
	err := c.cc.Invoke(ctx, RqdInterface_Unlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rqdInterfaceClient) UnlockAll(ctx context.Context, in *RqdStaticUnlockAllRequest, opts ...grpc.CallOption) (*RqdStaticUnlockAllResponse, error) {
	out := new(RqdStaticUnlockAllResponse)
	err := c.cc.Invoke(ctx, RqdInterface_UnlockAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RqdInterfaceServer is the server API for RqdInterface service.
// All implementations must embed UnimplementedRqdInterfaceServer
// for forward compatibility
type RqdInterfaceServer interface {
	// Return the RunFrame by id
	GetRunFrame(context.Context, *RqdStaticGetRunFrameRequest) (*RqdStaticGetRunFrameResponse, error)
	// Return the RunningFrameStatus report
	GetRunningFrameStatus(context.Context, *RqdStaticGetRunningFrameStatusRequest) (*RqdStaticGetRunningFrameStatusResponse, error)
	// Kill the running frame by frame id
	KillRunningFrame(context.Context, *RqdStaticKillRunningFrameRequest) (*RqdStaticKillRunningFrameResponse, error)
	// Launch a new running frame
	LaunchFrame(context.Context, *RqdStaticLaunchFrameRequest) (*RqdStaticLaunchFrameResponse, error)
	// Lock a number of cores
	Lock(context.Context, *RqdStaticLockRequest) (*RqdStaticLockResponse, error)
	// Lock all
	LockAll(context.Context, *RqdStaticLockAllRequest) (*RqdStaticLockAllResponse, error)
	// Disable NIMBY on host
	NimbyOff(context.Context, *RqdStaticNimbyOffRequest) (*RqdStaticNimbyOffResponse, error)
	// Enable NIMBY on host
	NimbyOn(context.Context, *RqdStaticNimbyOnRequest) (*RqdStaticNimbyOnResponse, error)
	// Reboot the host when it becomes idle
	RebootIdle(context.Context, *RqdStaticRebootIdleRequest) (*RqdStaticRebootIdleResponse, error)
	// Reboot the host now
	RebootNow(context.Context, *RqdStaticRebootNowRequest) (*RqdStaticRebootNowResponse, error)
	// Return the HostReport
	ReportStatus(context.Context, *RqdStaticReportStatusRequest) (*RqdStaticReportStatusResponse, error)
	// Restart the rqd process when it becomes idle
	RestartRqdIdle(context.Context, *RqdStaticRestartIdleRequest) (*RqdStaticRestartIdleResponse, error)
	// Restart rqd process now
	RestartRqdNow(context.Context, *RqdStaticRestartNowRequest) (*RqdStaticRestartNowResponse, error)
	// Turn off rqd when it becomes idle
	ShutdownRqdIdle(context.Context, *RqdStaticShutdownIdleRequest) (*RqdStaticShutdownIdleResponse, error)
	// Stop rqd now
	ShutdownRqdNow(context.Context, *RqdStaticShutdownNowRequest) (*RqdStaticShutdownNowResponse, error)
	// Unlock a number of cores
	Unlock(context.Context, *RqdStaticUnlockRequest) (*RqdStaticUnlockResponse, error)
	// Unlock all cores
	UnlockAll(context.Context, *RqdStaticUnlockAllRequest) (*RqdStaticUnlockAllResponse, error)
	mustEmbedUnimplementedRqdInterfaceServer()
}

// UnimplementedRqdInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedRqdInterfaceServer struct {
}

func (UnimplementedRqdInterfaceServer) GetRunFrame(context.Context, *RqdStaticGetRunFrameRequest) (*RqdStaticGetRunFrameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunFrame not implemented")
}
func (UnimplementedRqdInterfaceServer) GetRunningFrameStatus(context.Context, *RqdStaticGetRunningFrameStatusRequest) (*RqdStaticGetRunningFrameStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunningFrameStatus not implemented")
}
func (UnimplementedRqdInterfaceServer) KillRunningFrame(context.Context, *RqdStaticKillRunningFrameRequest) (*RqdStaticKillRunningFrameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillRunningFrame not implemented")
}
func (UnimplementedRqdInterfaceServer) LaunchFrame(context.Context, *RqdStaticLaunchFrameRequest) (*RqdStaticLaunchFrameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchFrame not implemented")
}
func (UnimplementedRqdInterfaceServer) Lock(context.Context, *RqdStaticLockRequest) (*RqdStaticLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedRqdInterfaceServer) LockAll(context.Context, *RqdStaticLockAllRequest) (*RqdStaticLockAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockAll not implemented")
}
func (UnimplementedRqdInterfaceServer) NimbyOff(context.Context, *RqdStaticNimbyOffRequest) (*RqdStaticNimbyOffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NimbyOff not implemented")
}
func (UnimplementedRqdInterfaceServer) NimbyOn(context.Context, *RqdStaticNimbyOnRequest) (*RqdStaticNimbyOnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NimbyOn not implemented")
}
func (UnimplementedRqdInterfaceServer) RebootIdle(context.Context, *RqdStaticRebootIdleRequest) (*RqdStaticRebootIdleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebootIdle not implemented")
}
func (UnimplementedRqdInterfaceServer) RebootNow(context.Context, *RqdStaticRebootNowRequest) (*RqdStaticRebootNowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebootNow not implemented")
}
func (UnimplementedRqdInterfaceServer) ReportStatus(context.Context, *RqdStaticReportStatusRequest) (*RqdStaticReportStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportStatus not implemented")
}
func (UnimplementedRqdInterfaceServer) RestartRqdIdle(context.Context, *RqdStaticRestartIdleRequest) (*RqdStaticRestartIdleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartRqdIdle not implemented")
}
func (UnimplementedRqdInterfaceServer) RestartRqdNow(context.Context, *RqdStaticRestartNowRequest) (*RqdStaticRestartNowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartRqdNow not implemented")
}
func (UnimplementedRqdInterfaceServer) ShutdownRqdIdle(context.Context, *RqdStaticShutdownIdleRequest) (*RqdStaticShutdownIdleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownRqdIdle not implemented")
}
func (UnimplementedRqdInterfaceServer) ShutdownRqdNow(context.Context, *RqdStaticShutdownNowRequest) (*RqdStaticShutdownNowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownRqdNow not implemented")
}
func (UnimplementedRqdInterfaceServer) Unlock(context.Context, *RqdStaticUnlockRequest) (*RqdStaticUnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedRqdInterfaceServer) UnlockAll(context.Context, *RqdStaticUnlockAllRequest) (*RqdStaticUnlockAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockAll not implemented")
}
func (UnimplementedRqdInterfaceServer) mustEmbedUnimplementedRqdInterfaceServer() {}

// UnsafeRqdInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RqdInterfaceServer will
// result in compilation errors.
type UnsafeRqdInterfaceServer interface {
	mustEmbedUnimplementedRqdInterfaceServer()
}

func RegisterRqdInterfaceServer(s grpc.ServiceRegistrar, srv RqdInterfaceServer) {
	s.RegisterService(&RqdInterface_ServiceDesc, srv)
}

func _RqdInterface_GetRunFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdStaticGetRunFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdInterfaceServer).GetRunFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdInterface_GetRunFrame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdInterfaceServer).GetRunFrame(ctx, req.(*RqdStaticGetRunFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RqdInterface_GetRunningFrameStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdStaticGetRunningFrameStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdInterfaceServer).GetRunningFrameStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdInterface_GetRunningFrameStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdInterfaceServer).GetRunningFrameStatus(ctx, req.(*RqdStaticGetRunningFrameStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RqdInterface_KillRunningFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdStaticKillRunningFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdInterfaceServer).KillRunningFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdInterface_KillRunningFrame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdInterfaceServer).KillRunningFrame(ctx, req.(*RqdStaticKillRunningFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RqdInterface_LaunchFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdStaticLaunchFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdInterfaceServer).LaunchFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdInterface_LaunchFrame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdInterfaceServer).LaunchFrame(ctx, req.(*RqdStaticLaunchFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RqdInterface_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdStaticLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdInterfaceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdInterface_Lock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdInterfaceServer).Lock(ctx, req.(*RqdStaticLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RqdInterface_LockAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdStaticLockAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdInterfaceServer).LockAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdInterface_LockAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdInterfaceServer).LockAll(ctx, req.(*RqdStaticLockAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RqdInterface_NimbyOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdStaticNimbyOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdInterfaceServer).NimbyOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdInterface_NimbyOff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdInterfaceServer).NimbyOff(ctx, req.(*RqdStaticNimbyOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RqdInterface_NimbyOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdStaticNimbyOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdInterfaceServer).NimbyOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdInterface_NimbyOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdInterfaceServer).NimbyOn(ctx, req.(*RqdStaticNimbyOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RqdInterface_RebootIdle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdStaticRebootIdleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdInterfaceServer).RebootIdle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdInterface_RebootIdle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdInterfaceServer).RebootIdle(ctx, req.(*RqdStaticRebootIdleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RqdInterface_RebootNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdStaticRebootNowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdInterfaceServer).RebootNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdInterface_RebootNow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdInterfaceServer).RebootNow(ctx, req.(*RqdStaticRebootNowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RqdInterface_ReportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdStaticReportStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdInterfaceServer).ReportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdInterface_ReportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdInterfaceServer).ReportStatus(ctx, req.(*RqdStaticReportStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RqdInterface_RestartRqdIdle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdStaticRestartIdleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdInterfaceServer).RestartRqdIdle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdInterface_RestartRqdIdle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdInterfaceServer).RestartRqdIdle(ctx, req.(*RqdStaticRestartIdleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RqdInterface_RestartRqdNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdStaticRestartNowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdInterfaceServer).RestartRqdNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdInterface_RestartRqdNow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdInterfaceServer).RestartRqdNow(ctx, req.(*RqdStaticRestartNowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RqdInterface_ShutdownRqdIdle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdStaticShutdownIdleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdInterfaceServer).ShutdownRqdIdle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdInterface_ShutdownRqdIdle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdInterfaceServer).ShutdownRqdIdle(ctx, req.(*RqdStaticShutdownIdleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RqdInterface_ShutdownRqdNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdStaticShutdownNowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdInterfaceServer).ShutdownRqdNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdInterface_ShutdownRqdNow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdInterfaceServer).ShutdownRqdNow(ctx, req.(*RqdStaticShutdownNowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RqdInterface_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdStaticUnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdInterfaceServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdInterface_Unlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdInterfaceServer).Unlock(ctx, req.(*RqdStaticUnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RqdInterface_UnlockAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RqdStaticUnlockAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RqdInterfaceServer).UnlockAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RqdInterface_UnlockAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RqdInterfaceServer).UnlockAll(ctx, req.(*RqdStaticUnlockAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RqdInterface_ServiceDesc is the grpc.ServiceDesc for RqdInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RqdInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rqd.RqdInterface",
	HandlerType: (*RqdInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRunFrame",
			Handler:    _RqdInterface_GetRunFrame_Handler,
		},
		{
			MethodName: "GetRunningFrameStatus",
			Handler:    _RqdInterface_GetRunningFrameStatus_Handler,
		},
		{
			MethodName: "KillRunningFrame",
			Handler:    _RqdInterface_KillRunningFrame_Handler,
		},
		{
			MethodName: "LaunchFrame",
			Handler:    _RqdInterface_LaunchFrame_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _RqdInterface_Lock_Handler,
		},
		{
			MethodName: "LockAll",
			Handler:    _RqdInterface_LockAll_Handler,
		},
		{
			MethodName: "NimbyOff",
			Handler:    _RqdInterface_NimbyOff_Handler,
		},
		{
			MethodName: "NimbyOn",
			Handler:    _RqdInterface_NimbyOn_Handler,
		},
		{
			MethodName: "RebootIdle",
			Handler:    _RqdInterface_RebootIdle_Handler,
		},
		{
			MethodName: "RebootNow",
			Handler:    _RqdInterface_RebootNow_Handler,
		},
		{
			MethodName: "ReportStatus",
			Handler:    _RqdInterface_ReportStatus_Handler,
		},
		{
			MethodName: "RestartRqdIdle",
			Handler:    _RqdInterface_RestartRqdIdle_Handler,
		},
		{
			MethodName: "RestartRqdNow",
			Handler:    _RqdInterface_RestartRqdNow_Handler,
		},
		{
			MethodName: "ShutdownRqdIdle",
			Handler:    _RqdInterface_ShutdownRqdIdle_Handler,
		},
		{
			MethodName: "ShutdownRqdNow",
			Handler:    _RqdInterface_ShutdownRqdNow_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _RqdInterface_Unlock_Handler,
		},
		{
			MethodName: "UnlockAll",
			Handler:    _RqdInterface_UnlockAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "OpenCue/proto/rqd.proto",
}

const (
	RunningFrame_Kill_FullMethodName   = "/rqd.RunningFrame/Kill"
	RunningFrame_Status_FullMethodName = "/rqd.RunningFrame/Status"
)

// RunningFrameClient is the client API for RunningFrame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunningFrameClient interface {
	// Kill the provided running frame
	Kill(ctx context.Context, in *RunningFrameKillRequest, opts ...grpc.CallOption) (*RunningFrameKillResponse, error)
	// Get the status of the running frame
	Status(ctx context.Context, in *RunningFrameStatusRequest, opts ...grpc.CallOption) (*RunningFrameStatusResponse, error)
}

type runningFrameClient struct {
	cc grpc.ClientConnInterface
}

func NewRunningFrameClient(cc grpc.ClientConnInterface) RunningFrameClient {
	return &runningFrameClient{cc}
}

func (c *runningFrameClient) Kill(ctx context.Context, in *RunningFrameKillRequest, opts ...grpc.CallOption) (*RunningFrameKillResponse, error) {
	out := new(RunningFrameKillResponse)
	err := c.cc.Invoke(ctx, RunningFrame_Kill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runningFrameClient) Status(ctx context.Context, in *RunningFrameStatusRequest, opts ...grpc.CallOption) (*RunningFrameStatusResponse, error) {
	out := new(RunningFrameStatusResponse)
	err := c.cc.Invoke(ctx, RunningFrame_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunningFrameServer is the server API for RunningFrame service.
// All implementations must embed UnimplementedRunningFrameServer
// for forward compatibility
type RunningFrameServer interface {
	// Kill the provided running frame
	Kill(context.Context, *RunningFrameKillRequest) (*RunningFrameKillResponse, error)
	// Get the status of the running frame
	Status(context.Context, *RunningFrameStatusRequest) (*RunningFrameStatusResponse, error)
	mustEmbedUnimplementedRunningFrameServer()
}

// UnimplementedRunningFrameServer must be embedded to have forward compatible implementations.
type UnimplementedRunningFrameServer struct {
}

func (UnimplementedRunningFrameServer) Kill(context.Context, *RunningFrameKillRequest) (*RunningFrameKillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedRunningFrameServer) Status(context.Context, *RunningFrameStatusRequest) (*RunningFrameStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedRunningFrameServer) mustEmbedUnimplementedRunningFrameServer() {}

// UnsafeRunningFrameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunningFrameServer will
// result in compilation errors.
type UnsafeRunningFrameServer interface {
	mustEmbedUnimplementedRunningFrameServer()
}

func RegisterRunningFrameServer(s grpc.ServiceRegistrar, srv RunningFrameServer) {
	s.RegisterService(&RunningFrame_ServiceDesc, srv)
}

func _RunningFrame_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunningFrameKillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunningFrameServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunningFrame_Kill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunningFrameServer).Kill(ctx, req.(*RunningFrameKillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunningFrame_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunningFrameStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunningFrameServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunningFrame_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunningFrameServer).Status(ctx, req.(*RunningFrameStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RunningFrame_ServiceDesc is the grpc.ServiceDesc for RunningFrame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunningFrame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rqd.RunningFrame",
	HandlerType: (*RunningFrameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Kill",
			Handler:    _RunningFrame_Kill_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _RunningFrame_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "OpenCue/proto/rqd.proto",
}
