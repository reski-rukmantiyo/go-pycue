// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: OpenCue/proto/show.proto

package show

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShowInterface_CreateFilter_FullMethodName          = "/show.ShowInterface/CreateFilter"
	ShowInterface_CreateOwner_FullMethodName           = "/show.ShowInterface/CreateOwner"
	ShowInterface_CreateServiceOverride_FullMethodName = "/show.ShowInterface/CreateServiceOverride"
	ShowInterface_CreateShow_FullMethodName            = "/show.ShowInterface/CreateShow"
	ShowInterface_CreateSubscription_FullMethodName    = "/show.ShowInterface/CreateSubscription"
	ShowInterface_Delete_FullMethodName                = "/show.ShowInterface/Delete"
	ShowInterface_EnableBooking_FullMethodName         = "/show.ShowInterface/EnableBooking"
	ShowInterface_EnableDispatching_FullMethodName     = "/show.ShowInterface/EnableDispatching"
	ShowInterface_FindFilter_FullMethodName            = "/show.ShowInterface/FindFilter"
	ShowInterface_FindShow_FullMethodName              = "/show.ShowInterface/FindShow"
	ShowInterface_GetActiveShows_FullMethodName        = "/show.ShowInterface/GetActiveShows"
	ShowInterface_GetDeeds_FullMethodName              = "/show.ShowInterface/GetDeeds"
	ShowInterface_GetDepartment_FullMethodName         = "/show.ShowInterface/GetDepartment"
	ShowInterface_GetDepartments_FullMethodName        = "/show.ShowInterface/GetDepartments"
	ShowInterface_GetFilters_FullMethodName            = "/show.ShowInterface/GetFilters"
	ShowInterface_GetGroups_FullMethodName             = "/show.ShowInterface/GetGroups"
	ShowInterface_GetJobs_FullMethodName               = "/show.ShowInterface/GetJobs"
	ShowInterface_GetJobWhiteboard_FullMethodName      = "/show.ShowInterface/GetJobWhiteboard"
	ShowInterface_GetRootGroup_FullMethodName          = "/show.ShowInterface/GetRootGroup"
	ShowInterface_GetServiceOverride_FullMethodName    = "/show.ShowInterface/GetServiceOverride"
	ShowInterface_GetServiceOverrides_FullMethodName   = "/show.ShowInterface/GetServiceOverrides"
	ShowInterface_GetShows_FullMethodName              = "/show.ShowInterface/GetShows"
	ShowInterface_GetSubscriptions_FullMethodName      = "/show.ShowInterface/GetSubscriptions"
	ShowInterface_SetActive_FullMethodName             = "/show.ShowInterface/SetActive"
	ShowInterface_SetCommentEmail_FullMethodName       = "/show.ShowInterface/SetCommentEmail"
	ShowInterface_SetDefaultMaxCores_FullMethodName    = "/show.ShowInterface/SetDefaultMaxCores"
	ShowInterface_SetDefaultMinCores_FullMethodName    = "/show.ShowInterface/SetDefaultMinCores"
	ShowInterface_SetDefaultMaxGpus_FullMethodName     = "/show.ShowInterface/SetDefaultMaxGpus"
	ShowInterface_SetDefaultMinGpus_FullMethodName     = "/show.ShowInterface/SetDefaultMinGpus"
)

// ShowInterfaceClient is the client API for ShowInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShowInterfaceClient interface {
	// Creates a new empty filter
	CreateFilter(ctx context.Context, in *ShowCreateFilterRequest, opts ...grpc.CallOption) (*ShowCreateFilterResponse, error)
	// Create a new owner.
	CreateOwner(ctx context.Context, in *ShowCreateOwnerRequest, opts ...grpc.CallOption) (*ShowCreateOwnerResponse, error)
	// Add a new service overrides.
	CreateServiceOverride(ctx context.Context, in *ShowCreateServiceOverrideRequest, opts ...grpc.CallOption) (*ShowCreateServiceOverrideResponse, error)
	// Creates a show with the specified name and returns it.
	CreateShow(ctx context.Context, in *ShowCreateShowRequest, opts ...grpc.CallOption) (*ShowCreateShowResponse, error)
	// creates a new subscription
	CreateSubscription(ctx context.Context, in *ShowCreateSubscriptionRequest, opts ...grpc.CallOption) (*ShowCreateSubscriptionResponse, error)
	// Deletes a show if no jobs were ever launched for the show
	Delete(ctx context.Context, in *ShowDeleteRequest, opts ...grpc.CallOption) (*ShowDeleteResponse, error)
	// Enables/disables automated resource assignment. If this is disabled no new resources will be assigned but
	// existing resources will continue to dispatch.
	EnableBooking(ctx context.Context, in *ShowEnableBookingRequest, opts ...grpc.CallOption) (*ShowEnableBookingResponse, error)
	// Enables/disables job dispatching.  If this is disabled then new resources are assigned but existing resources
	// are always unbooked after each completed frame.
	EnableDispatching(ctx context.Context, in *ShowEnableDispatchingRequest, opts ...grpc.CallOption) (*ShowEnableDispatchingResponse, error)
	// finds a filter by name
	FindFilter(ctx context.Context, in *ShowFindFilterRequest, opts ...grpc.CallOption) (*ShowFindFilterResponse, error)
	// Find a show with the specified name.
	FindShow(ctx context.Context, in *ShowFindShowRequest, opts ...grpc.CallOption) (*ShowFindShowResponse, error)
	// Returns a list of all active shows.
	GetActiveShows(ctx context.Context, in *ShowGetActiveShowsRequest, opts ...grpc.CallOption) (*ShowGetActiveShowsResponse, error)
	// Return all the host deeds for the specified show.
	GetDeeds(ctx context.Context, in *ShowGetDeedsRequest, opts ...grpc.CallOption) (*ShowGetDeedsResponse, error)
	// Returns the department manager for the specified department
	GetDepartment(ctx context.Context, in *ShowGetDepartmentRequest, opts ...grpc.CallOption) (*ShowGetDepartmentResponse, error)
	// Returns a list of all active departments
	GetDepartments(ctx context.Context, in *ShowGetDepartmentsRequest, opts ...grpc.CallOption) (*ShowGetDepartmentsResponse, error)
	// Grabs a list of show filters
	GetFilters(ctx context.Context, in *ShowGetFiltersRequest, opts ...grpc.CallOption) (*ShowGetFiltersResponse, error)
	// returns a list of job groups
	GetGroups(ctx context.Context, in *ShowGetGroupsRequest, opts ...grpc.CallOption) (*ShowGetGroupsResponse, error)
	// returns a flat list of jobs
	GetJobs(ctx context.Context, in *ShowGetJobsRequest, opts ...grpc.CallOption) (*ShowGetJobsResponse, error)
	// returns the show's job whiteboard
	GetJobWhiteboard(ctx context.Context, in *ShowGetJobWhiteboardRequest, opts ...grpc.CallOption) (*ShowGetJobWhiteboardResponse, error)
	// returns the root group
	GetRootGroup(ctx context.Context, in *ShowGetRootGroupRequest, opts ...grpc.CallOption) (*ShowGetRootGroupResponse, error)
	// Get a service override based on its name or id.
	GetServiceOverride(ctx context.Context, in *ShowGetServiceOverrideRequest, opts ...grpc.CallOption) (*ShowGetServiceOverrideResponse, error)
	// Get a list of service overrides for this show.
	GetServiceOverrides(ctx context.Context, in *ShowGetServiceOverridesRequest, opts ...grpc.CallOption) (*ShowGetServiceOverridesResponse, error)
	// Returns a list of all shows
	GetShows(ctx context.Context, in *ShowGetShowsRequest, opts ...grpc.CallOption) (*ShowGetShowsResponse, error)
	// returns a list of a shows subscriptions
	GetSubscriptions(ctx context.Context, in *ShowGetSubscriptionRequest, opts ...grpc.CallOption) (*ShowGetSubscriptionResponse, error)
	// Set a show's active to enabled/disabled. Active shows can be queried using the getActiveShows() method.
	SetActive(ctx context.Context, in *ShowSetActiveRequest, opts ...grpc.CallOption) (*ShowSetActiveResponse, error)
	// If set, all comments on a show are echoed to the given list of email addresses.
	SetCommentEmail(ctx context.Context, in *ShowSetCommentEmailRequest, opts ...grpc.CallOption) (*ShowSetCommentEmailResponse, error)
	// sets a show's default max procs
	SetDefaultMaxCores(ctx context.Context, in *ShowSetDefaultMaxCoresRequest, opts ...grpc.CallOption) (*ShowSetDefaultMaxCoresResponse, error)
	// sets a show's default min procs
	SetDefaultMinCores(ctx context.Context, in *ShowSetDefaultMinCoresRequest, opts ...grpc.CallOption) (*ShowSetDefaultMinCoresResponse, error)
	// sets a show's default max Gpus
	SetDefaultMaxGpus(ctx context.Context, in *ShowSetDefaultMaxGpusRequest, opts ...grpc.CallOption) (*ShowSetDefaultMaxGpusResponse, error)
	// sets a show's default min Gpus
	SetDefaultMinGpus(ctx context.Context, in *ShowSetDefaultMinGpusRequest, opts ...grpc.CallOption) (*ShowSetDefaultMinGpusResponse, error)
}

type showInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewShowInterfaceClient(cc grpc.ClientConnInterface) ShowInterfaceClient {
	return &showInterfaceClient{cc}
}

func (c *showInterfaceClient) CreateFilter(ctx context.Context, in *ShowCreateFilterRequest, opts ...grpc.CallOption) (*ShowCreateFilterResponse, error) {
	out := new(ShowCreateFilterResponse)
	err := c.cc.Invoke(ctx, ShowInterface_CreateFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) CreateOwner(ctx context.Context, in *ShowCreateOwnerRequest, opts ...grpc.CallOption) (*ShowCreateOwnerResponse, error) {
	out := new(ShowCreateOwnerResponse)
	err := c.cc.Invoke(ctx, ShowInterface_CreateOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) CreateServiceOverride(ctx context.Context, in *ShowCreateServiceOverrideRequest, opts ...grpc.CallOption) (*ShowCreateServiceOverrideResponse, error) {
	out := new(ShowCreateServiceOverrideResponse)
	err := c.cc.Invoke(ctx, ShowInterface_CreateServiceOverride_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) CreateShow(ctx context.Context, in *ShowCreateShowRequest, opts ...grpc.CallOption) (*ShowCreateShowResponse, error) {
	out := new(ShowCreateShowResponse)
	err := c.cc.Invoke(ctx, ShowInterface_CreateShow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) CreateSubscription(ctx context.Context, in *ShowCreateSubscriptionRequest, opts ...grpc.CallOption) (*ShowCreateSubscriptionResponse, error) {
	out := new(ShowCreateSubscriptionResponse)
	err := c.cc.Invoke(ctx, ShowInterface_CreateSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) Delete(ctx context.Context, in *ShowDeleteRequest, opts ...grpc.CallOption) (*ShowDeleteResponse, error) {
	out := new(ShowDeleteResponse)
	err := c.cc.Invoke(ctx, ShowInterface_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) EnableBooking(ctx context.Context, in *ShowEnableBookingRequest, opts ...grpc.CallOption) (*ShowEnableBookingResponse, error) {
	out := new(ShowEnableBookingResponse)
	err := c.cc.Invoke(ctx, ShowInterface_EnableBooking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) EnableDispatching(ctx context.Context, in *ShowEnableDispatchingRequest, opts ...grpc.CallOption) (*ShowEnableDispatchingResponse, error) {
	out := new(ShowEnableDispatchingResponse)
	err := c.cc.Invoke(ctx, ShowInterface_EnableDispatching_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) FindFilter(ctx context.Context, in *ShowFindFilterRequest, opts ...grpc.CallOption) (*ShowFindFilterResponse, error) {
	out := new(ShowFindFilterResponse)
	err := c.cc.Invoke(ctx, ShowInterface_FindFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) FindShow(ctx context.Context, in *ShowFindShowRequest, opts ...grpc.CallOption) (*ShowFindShowResponse, error) {
	out := new(ShowFindShowResponse)
	err := c.cc.Invoke(ctx, ShowInterface_FindShow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) GetActiveShows(ctx context.Context, in *ShowGetActiveShowsRequest, opts ...grpc.CallOption) (*ShowGetActiveShowsResponse, error) {
	out := new(ShowGetActiveShowsResponse)
	err := c.cc.Invoke(ctx, ShowInterface_GetActiveShows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) GetDeeds(ctx context.Context, in *ShowGetDeedsRequest, opts ...grpc.CallOption) (*ShowGetDeedsResponse, error) {
	out := new(ShowGetDeedsResponse)
	err := c.cc.Invoke(ctx, ShowInterface_GetDeeds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) GetDepartment(ctx context.Context, in *ShowGetDepartmentRequest, opts ...grpc.CallOption) (*ShowGetDepartmentResponse, error) {
	out := new(ShowGetDepartmentResponse)
	err := c.cc.Invoke(ctx, ShowInterface_GetDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) GetDepartments(ctx context.Context, in *ShowGetDepartmentsRequest, opts ...grpc.CallOption) (*ShowGetDepartmentsResponse, error) {
	out := new(ShowGetDepartmentsResponse)
	err := c.cc.Invoke(ctx, ShowInterface_GetDepartments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) GetFilters(ctx context.Context, in *ShowGetFiltersRequest, opts ...grpc.CallOption) (*ShowGetFiltersResponse, error) {
	out := new(ShowGetFiltersResponse)
	err := c.cc.Invoke(ctx, ShowInterface_GetFilters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) GetGroups(ctx context.Context, in *ShowGetGroupsRequest, opts ...grpc.CallOption) (*ShowGetGroupsResponse, error) {
	out := new(ShowGetGroupsResponse)
	err := c.cc.Invoke(ctx, ShowInterface_GetGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) GetJobs(ctx context.Context, in *ShowGetJobsRequest, opts ...grpc.CallOption) (*ShowGetJobsResponse, error) {
	out := new(ShowGetJobsResponse)
	err := c.cc.Invoke(ctx, ShowInterface_GetJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) GetJobWhiteboard(ctx context.Context, in *ShowGetJobWhiteboardRequest, opts ...grpc.CallOption) (*ShowGetJobWhiteboardResponse, error) {
	out := new(ShowGetJobWhiteboardResponse)
	err := c.cc.Invoke(ctx, ShowInterface_GetJobWhiteboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) GetRootGroup(ctx context.Context, in *ShowGetRootGroupRequest, opts ...grpc.CallOption) (*ShowGetRootGroupResponse, error) {
	out := new(ShowGetRootGroupResponse)
	err := c.cc.Invoke(ctx, ShowInterface_GetRootGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) GetServiceOverride(ctx context.Context, in *ShowGetServiceOverrideRequest, opts ...grpc.CallOption) (*ShowGetServiceOverrideResponse, error) {
	out := new(ShowGetServiceOverrideResponse)
	err := c.cc.Invoke(ctx, ShowInterface_GetServiceOverride_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) GetServiceOverrides(ctx context.Context, in *ShowGetServiceOverridesRequest, opts ...grpc.CallOption) (*ShowGetServiceOverridesResponse, error) {
	out := new(ShowGetServiceOverridesResponse)
	err := c.cc.Invoke(ctx, ShowInterface_GetServiceOverrides_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) GetShows(ctx context.Context, in *ShowGetShowsRequest, opts ...grpc.CallOption) (*ShowGetShowsResponse, error) {
	out := new(ShowGetShowsResponse)
	err := c.cc.Invoke(ctx, ShowInterface_GetShows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) GetSubscriptions(ctx context.Context, in *ShowGetSubscriptionRequest, opts ...grpc.CallOption) (*ShowGetSubscriptionResponse, error) {
	out := new(ShowGetSubscriptionResponse)
	err := c.cc.Invoke(ctx, ShowInterface_GetSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) SetActive(ctx context.Context, in *ShowSetActiveRequest, opts ...grpc.CallOption) (*ShowSetActiveResponse, error) {
	out := new(ShowSetActiveResponse)
	err := c.cc.Invoke(ctx, ShowInterface_SetActive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) SetCommentEmail(ctx context.Context, in *ShowSetCommentEmailRequest, opts ...grpc.CallOption) (*ShowSetCommentEmailResponse, error) {
	out := new(ShowSetCommentEmailResponse)
	err := c.cc.Invoke(ctx, ShowInterface_SetCommentEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) SetDefaultMaxCores(ctx context.Context, in *ShowSetDefaultMaxCoresRequest, opts ...grpc.CallOption) (*ShowSetDefaultMaxCoresResponse, error) {
	out := new(ShowSetDefaultMaxCoresResponse)
	err := c.cc.Invoke(ctx, ShowInterface_SetDefaultMaxCores_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) SetDefaultMinCores(ctx context.Context, in *ShowSetDefaultMinCoresRequest, opts ...grpc.CallOption) (*ShowSetDefaultMinCoresResponse, error) {
	out := new(ShowSetDefaultMinCoresResponse)
	err := c.cc.Invoke(ctx, ShowInterface_SetDefaultMinCores_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) SetDefaultMaxGpus(ctx context.Context, in *ShowSetDefaultMaxGpusRequest, opts ...grpc.CallOption) (*ShowSetDefaultMaxGpusResponse, error) {
	out := new(ShowSetDefaultMaxGpusResponse)
	err := c.cc.Invoke(ctx, ShowInterface_SetDefaultMaxGpus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showInterfaceClient) SetDefaultMinGpus(ctx context.Context, in *ShowSetDefaultMinGpusRequest, opts ...grpc.CallOption) (*ShowSetDefaultMinGpusResponse, error) {
	out := new(ShowSetDefaultMinGpusResponse)
	err := c.cc.Invoke(ctx, ShowInterface_SetDefaultMinGpus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShowInterfaceServer is the server API for ShowInterface service.
// All implementations must embed UnimplementedShowInterfaceServer
// for forward compatibility
type ShowInterfaceServer interface {
	// Creates a new empty filter
	CreateFilter(context.Context, *ShowCreateFilterRequest) (*ShowCreateFilterResponse, error)
	// Create a new owner.
	CreateOwner(context.Context, *ShowCreateOwnerRequest) (*ShowCreateOwnerResponse, error)
	// Add a new service overrides.
	CreateServiceOverride(context.Context, *ShowCreateServiceOverrideRequest) (*ShowCreateServiceOverrideResponse, error)
	// Creates a show with the specified name and returns it.
	CreateShow(context.Context, *ShowCreateShowRequest) (*ShowCreateShowResponse, error)
	// creates a new subscription
	CreateSubscription(context.Context, *ShowCreateSubscriptionRequest) (*ShowCreateSubscriptionResponse, error)
	// Deletes a show if no jobs were ever launched for the show
	Delete(context.Context, *ShowDeleteRequest) (*ShowDeleteResponse, error)
	// Enables/disables automated resource assignment. If this is disabled no new resources will be assigned but
	// existing resources will continue to dispatch.
	EnableBooking(context.Context, *ShowEnableBookingRequest) (*ShowEnableBookingResponse, error)
	// Enables/disables job dispatching.  If this is disabled then new resources are assigned but existing resources
	// are always unbooked after each completed frame.
	EnableDispatching(context.Context, *ShowEnableDispatchingRequest) (*ShowEnableDispatchingResponse, error)
	// finds a filter by name
	FindFilter(context.Context, *ShowFindFilterRequest) (*ShowFindFilterResponse, error)
	// Find a show with the specified name.
	FindShow(context.Context, *ShowFindShowRequest) (*ShowFindShowResponse, error)
	// Returns a list of all active shows.
	GetActiveShows(context.Context, *ShowGetActiveShowsRequest) (*ShowGetActiveShowsResponse, error)
	// Return all the host deeds for the specified show.
	GetDeeds(context.Context, *ShowGetDeedsRequest) (*ShowGetDeedsResponse, error)
	// Returns the department manager for the specified department
	GetDepartment(context.Context, *ShowGetDepartmentRequest) (*ShowGetDepartmentResponse, error)
	// Returns a list of all active departments
	GetDepartments(context.Context, *ShowGetDepartmentsRequest) (*ShowGetDepartmentsResponse, error)
	// Grabs a list of show filters
	GetFilters(context.Context, *ShowGetFiltersRequest) (*ShowGetFiltersResponse, error)
	// returns a list of job groups
	GetGroups(context.Context, *ShowGetGroupsRequest) (*ShowGetGroupsResponse, error)
	// returns a flat list of jobs
	GetJobs(context.Context, *ShowGetJobsRequest) (*ShowGetJobsResponse, error)
	// returns the show's job whiteboard
	GetJobWhiteboard(context.Context, *ShowGetJobWhiteboardRequest) (*ShowGetJobWhiteboardResponse, error)
	// returns the root group
	GetRootGroup(context.Context, *ShowGetRootGroupRequest) (*ShowGetRootGroupResponse, error)
	// Get a service override based on its name or id.
	GetServiceOverride(context.Context, *ShowGetServiceOverrideRequest) (*ShowGetServiceOverrideResponse, error)
	// Get a list of service overrides for this show.
	GetServiceOverrides(context.Context, *ShowGetServiceOverridesRequest) (*ShowGetServiceOverridesResponse, error)
	// Returns a list of all shows
	GetShows(context.Context, *ShowGetShowsRequest) (*ShowGetShowsResponse, error)
	// returns a list of a shows subscriptions
	GetSubscriptions(context.Context, *ShowGetSubscriptionRequest) (*ShowGetSubscriptionResponse, error)
	// Set a show's active to enabled/disabled. Active shows can be queried using the getActiveShows() method.
	SetActive(context.Context, *ShowSetActiveRequest) (*ShowSetActiveResponse, error)
	// If set, all comments on a show are echoed to the given list of email addresses.
	SetCommentEmail(context.Context, *ShowSetCommentEmailRequest) (*ShowSetCommentEmailResponse, error)
	// sets a show's default max procs
	SetDefaultMaxCores(context.Context, *ShowSetDefaultMaxCoresRequest) (*ShowSetDefaultMaxCoresResponse, error)
	// sets a show's default min procs
	SetDefaultMinCores(context.Context, *ShowSetDefaultMinCoresRequest) (*ShowSetDefaultMinCoresResponse, error)
	// sets a show's default max Gpus
	SetDefaultMaxGpus(context.Context, *ShowSetDefaultMaxGpusRequest) (*ShowSetDefaultMaxGpusResponse, error)
	// sets a show's default min Gpus
	SetDefaultMinGpus(context.Context, *ShowSetDefaultMinGpusRequest) (*ShowSetDefaultMinGpusResponse, error)
	mustEmbedUnimplementedShowInterfaceServer()
}

// UnimplementedShowInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedShowInterfaceServer struct {
}

func (UnimplementedShowInterfaceServer) CreateFilter(context.Context, *ShowCreateFilterRequest) (*ShowCreateFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilter not implemented")
}
func (UnimplementedShowInterfaceServer) CreateOwner(context.Context, *ShowCreateOwnerRequest) (*ShowCreateOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOwner not implemented")
}
func (UnimplementedShowInterfaceServer) CreateServiceOverride(context.Context, *ShowCreateServiceOverrideRequest) (*ShowCreateServiceOverrideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceOverride not implemented")
}
func (UnimplementedShowInterfaceServer) CreateShow(context.Context, *ShowCreateShowRequest) (*ShowCreateShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShow not implemented")
}
func (UnimplementedShowInterfaceServer) CreateSubscription(context.Context, *ShowCreateSubscriptionRequest) (*ShowCreateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedShowInterfaceServer) Delete(context.Context, *ShowDeleteRequest) (*ShowDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedShowInterfaceServer) EnableBooking(context.Context, *ShowEnableBookingRequest) (*ShowEnableBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableBooking not implemented")
}
func (UnimplementedShowInterfaceServer) EnableDispatching(context.Context, *ShowEnableDispatchingRequest) (*ShowEnableDispatchingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableDispatching not implemented")
}
func (UnimplementedShowInterfaceServer) FindFilter(context.Context, *ShowFindFilterRequest) (*ShowFindFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFilter not implemented")
}
func (UnimplementedShowInterfaceServer) FindShow(context.Context, *ShowFindShowRequest) (*ShowFindShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindShow not implemented")
}
func (UnimplementedShowInterfaceServer) GetActiveShows(context.Context, *ShowGetActiveShowsRequest) (*ShowGetActiveShowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveShows not implemented")
}
func (UnimplementedShowInterfaceServer) GetDeeds(context.Context, *ShowGetDeedsRequest) (*ShowGetDeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeeds not implemented")
}
func (UnimplementedShowInterfaceServer) GetDepartment(context.Context, *ShowGetDepartmentRequest) (*ShowGetDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartment not implemented")
}
func (UnimplementedShowInterfaceServer) GetDepartments(context.Context, *ShowGetDepartmentsRequest) (*ShowGetDepartmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartments not implemented")
}
func (UnimplementedShowInterfaceServer) GetFilters(context.Context, *ShowGetFiltersRequest) (*ShowGetFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilters not implemented")
}
func (UnimplementedShowInterfaceServer) GetGroups(context.Context, *ShowGetGroupsRequest) (*ShowGetGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedShowInterfaceServer) GetJobs(context.Context, *ShowGetJobsRequest) (*ShowGetJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (UnimplementedShowInterfaceServer) GetJobWhiteboard(context.Context, *ShowGetJobWhiteboardRequest) (*ShowGetJobWhiteboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobWhiteboard not implemented")
}
func (UnimplementedShowInterfaceServer) GetRootGroup(context.Context, *ShowGetRootGroupRequest) (*ShowGetRootGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootGroup not implemented")
}
func (UnimplementedShowInterfaceServer) GetServiceOverride(context.Context, *ShowGetServiceOverrideRequest) (*ShowGetServiceOverrideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceOverride not implemented")
}
func (UnimplementedShowInterfaceServer) GetServiceOverrides(context.Context, *ShowGetServiceOverridesRequest) (*ShowGetServiceOverridesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceOverrides not implemented")
}
func (UnimplementedShowInterfaceServer) GetShows(context.Context, *ShowGetShowsRequest) (*ShowGetShowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShows not implemented")
}
func (UnimplementedShowInterfaceServer) GetSubscriptions(context.Context, *ShowGetSubscriptionRequest) (*ShowGetSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptions not implemented")
}
func (UnimplementedShowInterfaceServer) SetActive(context.Context, *ShowSetActiveRequest) (*ShowSetActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActive not implemented")
}
func (UnimplementedShowInterfaceServer) SetCommentEmail(context.Context, *ShowSetCommentEmailRequest) (*ShowSetCommentEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCommentEmail not implemented")
}
func (UnimplementedShowInterfaceServer) SetDefaultMaxCores(context.Context, *ShowSetDefaultMaxCoresRequest) (*ShowSetDefaultMaxCoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultMaxCores not implemented")
}
func (UnimplementedShowInterfaceServer) SetDefaultMinCores(context.Context, *ShowSetDefaultMinCoresRequest) (*ShowSetDefaultMinCoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultMinCores not implemented")
}
func (UnimplementedShowInterfaceServer) SetDefaultMaxGpus(context.Context, *ShowSetDefaultMaxGpusRequest) (*ShowSetDefaultMaxGpusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultMaxGpus not implemented")
}
func (UnimplementedShowInterfaceServer) SetDefaultMinGpus(context.Context, *ShowSetDefaultMinGpusRequest) (*ShowSetDefaultMinGpusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultMinGpus not implemented")
}
func (UnimplementedShowInterfaceServer) mustEmbedUnimplementedShowInterfaceServer() {}

// UnsafeShowInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShowInterfaceServer will
// result in compilation errors.
type UnsafeShowInterfaceServer interface {
	mustEmbedUnimplementedShowInterfaceServer()
}

func RegisterShowInterfaceServer(s grpc.ServiceRegistrar, srv ShowInterfaceServer) {
	s.RegisterService(&ShowInterface_ServiceDesc, srv)
}

func _ShowInterface_CreateFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCreateFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).CreateFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_CreateFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).CreateFilter(ctx, req.(*ShowCreateFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_CreateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCreateOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).CreateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_CreateOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).CreateOwner(ctx, req.(*ShowCreateOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_CreateServiceOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCreateServiceOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).CreateServiceOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_CreateServiceOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).CreateServiceOverride(ctx, req.(*ShowCreateServiceOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_CreateShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCreateShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).CreateShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_CreateShow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).CreateShow(ctx, req.(*ShowCreateShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_CreateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).CreateSubscription(ctx, req.(*ShowCreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).Delete(ctx, req.(*ShowDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_EnableBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowEnableBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).EnableBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_EnableBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).EnableBooking(ctx, req.(*ShowEnableBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_EnableDispatching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowEnableDispatchingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).EnableDispatching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_EnableDispatching_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).EnableDispatching(ctx, req.(*ShowEnableDispatchingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_FindFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowFindFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).FindFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_FindFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).FindFilter(ctx, req.(*ShowFindFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_FindShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowFindShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).FindShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_FindShow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).FindShow(ctx, req.(*ShowFindShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_GetActiveShows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowGetActiveShowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).GetActiveShows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_GetActiveShows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).GetActiveShows(ctx, req.(*ShowGetActiveShowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_GetDeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowGetDeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).GetDeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_GetDeeds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).GetDeeds(ctx, req.(*ShowGetDeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_GetDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowGetDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).GetDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_GetDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).GetDepartment(ctx, req.(*ShowGetDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_GetDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowGetDepartmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).GetDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_GetDepartments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).GetDepartments(ctx, req.(*ShowGetDepartmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_GetFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowGetFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).GetFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_GetFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).GetFilters(ctx, req.(*ShowGetFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowGetGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_GetGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).GetGroups(ctx, req.(*ShowGetGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_GetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowGetJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).GetJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_GetJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).GetJobs(ctx, req.(*ShowGetJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_GetJobWhiteboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowGetJobWhiteboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).GetJobWhiteboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_GetJobWhiteboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).GetJobWhiteboard(ctx, req.(*ShowGetJobWhiteboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_GetRootGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowGetRootGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).GetRootGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_GetRootGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).GetRootGroup(ctx, req.(*ShowGetRootGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_GetServiceOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowGetServiceOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).GetServiceOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_GetServiceOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).GetServiceOverride(ctx, req.(*ShowGetServiceOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_GetServiceOverrides_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowGetServiceOverridesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).GetServiceOverrides(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_GetServiceOverrides_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).GetServiceOverrides(ctx, req.(*ShowGetServiceOverridesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_GetShows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowGetShowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).GetShows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_GetShows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).GetShows(ctx, req.(*ShowGetShowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_GetSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowGetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).GetSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_GetSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).GetSubscriptions(ctx, req.(*ShowGetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_SetActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowSetActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).SetActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_SetActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).SetActive(ctx, req.(*ShowSetActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_SetCommentEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowSetCommentEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).SetCommentEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_SetCommentEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).SetCommentEmail(ctx, req.(*ShowSetCommentEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_SetDefaultMaxCores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowSetDefaultMaxCoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).SetDefaultMaxCores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_SetDefaultMaxCores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).SetDefaultMaxCores(ctx, req.(*ShowSetDefaultMaxCoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_SetDefaultMinCores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowSetDefaultMinCoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).SetDefaultMinCores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_SetDefaultMinCores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).SetDefaultMinCores(ctx, req.(*ShowSetDefaultMinCoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_SetDefaultMaxGpus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowSetDefaultMaxGpusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).SetDefaultMaxGpus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_SetDefaultMaxGpus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).SetDefaultMaxGpus(ctx, req.(*ShowSetDefaultMaxGpusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowInterface_SetDefaultMinGpus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowSetDefaultMinGpusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInterfaceServer).SetDefaultMinGpus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInterface_SetDefaultMinGpus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInterfaceServer).SetDefaultMinGpus(ctx, req.(*ShowSetDefaultMinGpusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShowInterface_ServiceDesc is the grpc.ServiceDesc for ShowInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShowInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "show.ShowInterface",
	HandlerType: (*ShowInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFilter",
			Handler:    _ShowInterface_CreateFilter_Handler,
		},
		{
			MethodName: "CreateOwner",
			Handler:    _ShowInterface_CreateOwner_Handler,
		},
		{
			MethodName: "CreateServiceOverride",
			Handler:    _ShowInterface_CreateServiceOverride_Handler,
		},
		{
			MethodName: "CreateShow",
			Handler:    _ShowInterface_CreateShow_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _ShowInterface_CreateSubscription_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ShowInterface_Delete_Handler,
		},
		{
			MethodName: "EnableBooking",
			Handler:    _ShowInterface_EnableBooking_Handler,
		},
		{
			MethodName: "EnableDispatching",
			Handler:    _ShowInterface_EnableDispatching_Handler,
		},
		{
			MethodName: "FindFilter",
			Handler:    _ShowInterface_FindFilter_Handler,
		},
		{
			MethodName: "FindShow",
			Handler:    _ShowInterface_FindShow_Handler,
		},
		{
			MethodName: "GetActiveShows",
			Handler:    _ShowInterface_GetActiveShows_Handler,
		},
		{
			MethodName: "GetDeeds",
			Handler:    _ShowInterface_GetDeeds_Handler,
		},
		{
			MethodName: "GetDepartment",
			Handler:    _ShowInterface_GetDepartment_Handler,
		},
		{
			MethodName: "GetDepartments",
			Handler:    _ShowInterface_GetDepartments_Handler,
		},
		{
			MethodName: "GetFilters",
			Handler:    _ShowInterface_GetFilters_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _ShowInterface_GetGroups_Handler,
		},
		{
			MethodName: "GetJobs",
			Handler:    _ShowInterface_GetJobs_Handler,
		},
		{
			MethodName: "GetJobWhiteboard",
			Handler:    _ShowInterface_GetJobWhiteboard_Handler,
		},
		{
			MethodName: "GetRootGroup",
			Handler:    _ShowInterface_GetRootGroup_Handler,
		},
		{
			MethodName: "GetServiceOverride",
			Handler:    _ShowInterface_GetServiceOverride_Handler,
		},
		{
			MethodName: "GetServiceOverrides",
			Handler:    _ShowInterface_GetServiceOverrides_Handler,
		},
		{
			MethodName: "GetShows",
			Handler:    _ShowInterface_GetShows_Handler,
		},
		{
			MethodName: "GetSubscriptions",
			Handler:    _ShowInterface_GetSubscriptions_Handler,
		},
		{
			MethodName: "SetActive",
			Handler:    _ShowInterface_SetActive_Handler,
		},
		{
			MethodName: "SetCommentEmail",
			Handler:    _ShowInterface_SetCommentEmail_Handler,
		},
		{
			MethodName: "SetDefaultMaxCores",
			Handler:    _ShowInterface_SetDefaultMaxCores_Handler,
		},
		{
			MethodName: "SetDefaultMinCores",
			Handler:    _ShowInterface_SetDefaultMinCores_Handler,
		},
		{
			MethodName: "SetDefaultMaxGpus",
			Handler:    _ShowInterface_SetDefaultMaxGpus_Handler,
		},
		{
			MethodName: "SetDefaultMinGpus",
			Handler:    _ShowInterface_SetDefaultMinGpus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "OpenCue/proto/show.proto",
}
