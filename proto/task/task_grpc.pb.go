// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: OpenCue/proto/task.proto

package task

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TaskInterface_ClearAdjustments_FullMethodName = "/task.TaskInterface/ClearAdjustments"
	TaskInterface_Delete_FullMethodName           = "/task.TaskInterface/Delete"
	TaskInterface_SetMinCores_FullMethodName      = "/task.TaskInterface/SetMinCores"
)

// TaskInterfaceClient is the client API for TaskInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskInterfaceClient interface {
	// Clear any min core adjustments that have been made
	ClearAdjustments(ctx context.Context, in *TaskClearAdjustmentsRequest, opts ...grpc.CallOption) (*TaskClearAdjustmentsResponse, error)
	// Removes the task.  If the department is managed the task is likely to come back upon the next update.
	Delete(ctx context.Context, in *TaskDeleteRequest, opts ...grpc.CallOption) (*TaskDeleteResponse, error)
	// Sets the minimum number of cores.  If the task is being managed, then the min core value is adjusted
	// but the original is not changed.
	SetMinCores(ctx context.Context, in *TaskSetMinCoresRequest, opts ...grpc.CallOption) (*TaskSetMinCoresResponse, error)
}

type taskInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskInterfaceClient(cc grpc.ClientConnInterface) TaskInterfaceClient {
	return &taskInterfaceClient{cc}
}

func (c *taskInterfaceClient) ClearAdjustments(ctx context.Context, in *TaskClearAdjustmentsRequest, opts ...grpc.CallOption) (*TaskClearAdjustmentsResponse, error) {
	out := new(TaskClearAdjustmentsResponse)
	err := c.cc.Invoke(ctx, TaskInterface_ClearAdjustments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskInterfaceClient) Delete(ctx context.Context, in *TaskDeleteRequest, opts ...grpc.CallOption) (*TaskDeleteResponse, error) {
	out := new(TaskDeleteResponse)
	err := c.cc.Invoke(ctx, TaskInterface_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskInterfaceClient) SetMinCores(ctx context.Context, in *TaskSetMinCoresRequest, opts ...grpc.CallOption) (*TaskSetMinCoresResponse, error) {
	out := new(TaskSetMinCoresResponse)
	err := c.cc.Invoke(ctx, TaskInterface_SetMinCores_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskInterfaceServer is the server API for TaskInterface service.
// All implementations must embed UnimplementedTaskInterfaceServer
// for forward compatibility
type TaskInterfaceServer interface {
	// Clear any min core adjustments that have been made
	ClearAdjustments(context.Context, *TaskClearAdjustmentsRequest) (*TaskClearAdjustmentsResponse, error)
	// Removes the task.  If the department is managed the task is likely to come back upon the next update.
	Delete(context.Context, *TaskDeleteRequest) (*TaskDeleteResponse, error)
	// Sets the minimum number of cores.  If the task is being managed, then the min core value is adjusted
	// but the original is not changed.
	SetMinCores(context.Context, *TaskSetMinCoresRequest) (*TaskSetMinCoresResponse, error)
	mustEmbedUnimplementedTaskInterfaceServer()
}

// UnimplementedTaskInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskInterfaceServer struct {
}

func (UnimplementedTaskInterfaceServer) ClearAdjustments(context.Context, *TaskClearAdjustmentsRequest) (*TaskClearAdjustmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearAdjustments not implemented")
}
func (UnimplementedTaskInterfaceServer) Delete(context.Context, *TaskDeleteRequest) (*TaskDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTaskInterfaceServer) SetMinCores(context.Context, *TaskSetMinCoresRequest) (*TaskSetMinCoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMinCores not implemented")
}
func (UnimplementedTaskInterfaceServer) mustEmbedUnimplementedTaskInterfaceServer() {}

// UnsafeTaskInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskInterfaceServer will
// result in compilation errors.
type UnsafeTaskInterfaceServer interface {
	mustEmbedUnimplementedTaskInterfaceServer()
}

func RegisterTaskInterfaceServer(s grpc.ServiceRegistrar, srv TaskInterfaceServer) {
	s.RegisterService(&TaskInterface_ServiceDesc, srv)
}

func _TaskInterface_ClearAdjustments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskClearAdjustmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskInterfaceServer).ClearAdjustments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskInterface_ClearAdjustments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskInterfaceServer).ClearAdjustments(ctx, req.(*TaskClearAdjustmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskInterface_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskInterfaceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskInterface_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskInterfaceServer).Delete(ctx, req.(*TaskDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskInterface_SetMinCores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSetMinCoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskInterfaceServer).SetMinCores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskInterface_SetMinCores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskInterfaceServer).SetMinCores(ctx, req.(*TaskSetMinCoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskInterface_ServiceDesc is the grpc.ServiceDesc for TaskInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.TaskInterface",
	HandlerType: (*TaskInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClearAdjustments",
			Handler:    _TaskInterface_ClearAdjustments_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TaskInterface_Delete_Handler,
		},
		{
			MethodName: "SetMinCores",
			Handler:    _TaskInterface_SetMinCores_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "OpenCue/proto/task.proto",
}
